CCS PCM C Compiler, Version 4.038, 33467               10-jun-10 08:27

               Filename: C:\Users\Fabio Dela Bruna\Documents\Curso de Ciência da Computação\7º Semestre\Arquitetura de Microcontroladores - Prof. Fernando Kestering Longo\Exercícios\programas_c\teste_keypad\teste1.lst

               ROM used: 328 words (4%)
                         Largest free fragment is 2048
               RAM used: 18 (5%) at main() level
                         27 (7%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   111
0003:  NOP
.................... #include "16F877A.h" 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses HS, PROTECT, NOLVP 
.................... #use delay(clock=20Mhz) 
000C:  MOVLW  2E
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETLW  00
.................... #include <lcd_4.c> 
.................... #define LCD_DB4   PIN_B4 // NIBLE de dados  
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
.................... #define LCD_RS    PIN_B2  
.................... #define LCD_E     PIN_B3  
.................... //#define USE_LCD_RW   1  
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................    0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................    0xc,                    // Display on  
....................    1,                      // Clear display  
....................    6                       // Increment cursor  
....................  };  
....................  
.................... void lcd_send_nibble(int8 nibble){  
....................    // Obs:  !! converte uma exprecao inteira  
....................    // para uma booleana (1 or 0).  
....................    output_bit(LCD_DB4, !!(nibble & 1));  
0020:  BTFSC  35.0
0021:  GOTO   024
0022:  BCF    06.4
0023:  GOTO   025
0024:  BSF    06.4
0025:  BSF    03.5
0026:  BCF    06.4
....................    output_bit(LCD_DB5, !!(nibble & 2));  
0027:  BCF    03.5
0028:  BTFSC  35.1
0029:  GOTO   02C
002A:  BCF    06.5
002B:  GOTO   02D
002C:  BSF    06.5
002D:  BSF    03.5
002E:  BCF    06.5
....................    output_bit(LCD_DB6, !!(nibble & 4));  
002F:  BCF    03.5
0030:  BTFSC  35.2
0031:  GOTO   034
0032:  BCF    06.6
0033:  GOTO   035
0034:  BSF    06.6
0035:  BSF    03.5
0036:  BCF    06.6
....................    output_bit(LCD_DB7, !!(nibble & 8));  
0037:  BCF    03.5
0038:  BTFSC  35.3
0039:  GOTO   03C
003A:  BCF    06.7
003B:  GOTO   03D
003C:  BSF    06.7
003D:  BSF    03.5
003E:  BCF    06.7
....................    delay_cycles(1);  
003F:  NOP
....................    output_high(LCD_E);  
0040:  BCF    06.3
0041:  BCF    03.5
0042:  BSF    06.3
....................    delay_us(2);  
0043:  MOVLW  03
0044:  MOVWF  77
0045:  DECFSZ 77,F
0046:  GOTO   045
....................    output_low(LCD_E);  
0047:  BSF    03.5
0048:  BCF    06.3
0049:  BCF    03.5
004A:  BCF    06.3
....................    delay_us(2);//teste  
004B:  MOVLW  03
004C:  MOVWF  77
004D:  DECFSZ 77,F
004E:  GOTO   04D
.................... }  
004F:  RETLW  00
.................... // Envia um byte para o LCD.  
.................... void lcd_send_byte(int8 address, int8 n){  
....................    output_low(LCD_RS);  
0050:  BSF    03.5
0051:  BCF    06.2
0052:  BCF    03.5
0053:  BCF    06.2
....................    delay_us(60);  
0054:  MOVLW  63
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  GOTO   059
....................    if(address)  
0059:  MOVF   32,F
005A:  BTFSC  03.2
005B:  GOTO   061
....................       output_high(LCD_RS);  
005C:  BSF    03.5
005D:  BCF    06.2
005E:  BCF    03.5
005F:  BSF    06.2
....................    else  
0060:  GOTO   065
....................       output_low(LCD_RS);  
0061:  BSF    03.5
0062:  BCF    06.2
0063:  BCF    03.5
0064:  BCF    06.2
....................    delay_cycles(1);  
0065:  NOP
....................    output_low(LCD_E);  
0066:  BSF    03.5
0067:  BCF    06.3
0068:  BCF    03.5
0069:  BCF    06.3
....................    lcd_send_nibble(n >> 4);  
006A:  SWAPF  33,W
006B:  MOVWF  34
006C:  MOVLW  0F
006D:  ANDWF  34,F
006E:  MOVF   34,W
006F:  MOVWF  35
0070:  CALL   020
....................    delay_us(2); //teste  
0071:  MOVLW  03
0072:  MOVWF  77
0073:  DECFSZ 77,F
0074:  GOTO   073
....................    lcd_send_nibble(n & 0xf);  
0075:  MOVF   33,W
0076:  ANDLW  0F
0077:  MOVWF  34
0078:  MOVWF  35
0079:  CALL   020
.................... }  
007A:  RETLW  00
.................... void lcd_init(void){  
....................    int8 i;  
....................    output_low(LCD_RS);  
007B:  BSF    03.5
007C:  BCF    06.2
007D:  BCF    03.5
007E:  BCF    06.2
....................    output_low(LCD_E);  
007F:  BSF    03.5
0080:  BCF    06.3
0081:  BCF    03.5
0082:  BCF    06.3
....................    delay_ms(15);  
0083:  MOVLW  0F
0084:  MOVWF  2E
0085:  CALL   00C
....................    for(i=0 ;i < 3; i++){  
0086:  CLRF   2B
0087:  MOVF   2B,W
0088:  SUBLW  02
0089:  BTFSS  03.0
008A:  GOTO   093
....................       lcd_send_nibble(0x03);  
008B:  MOVLW  03
008C:  MOVWF  35
008D:  CALL   020
....................       delay_ms(5);  
008E:  MOVLW  05
008F:  MOVWF  2E
0090:  CALL   00C
....................    }  
0091:  INCF   2B,F
0092:  GOTO   087
....................    lcd_send_nibble(0x02);  
0093:  MOVLW  02
0094:  MOVWF  35
0095:  CALL   020
....................    for(i=0; i < sizeof(LCD_INIT_STRING); i++){  
0096:  CLRF   2B
0097:  MOVF   2B,W
0098:  SUBLW  03
0099:  BTFSS  03.0
009A:  GOTO   0A4
....................       lcd_send_byte(0, LCD_INIT_STRING[i]);  
009B:  MOVF   2B,W
009C:  CALL   004
009D:  MOVWF  2C
009E:  CLRF   32
009F:  MOVF   2C,W
00A0:  MOVWF  33
00A1:  CALL   050
....................     }  
00A2:  INCF   2B,F
00A3:  GOTO   097
....................    delay_ms(15);  
00A4:  MOVLW  0F
00A5:  MOVWF  2E
00A6:  CALL   00C
.................... }  
00A7:  BCF    0A.3
00A8:  BCF    0A.4
00A9:  GOTO   128 (RETURN)
.................... // Posicoes válidas:  
.................... // de x=1 a x=16 y  
.................... // de y=1 a y=2  
.................... void lcd_gotoxy(int8 x, int8 y){  
....................    int8 address;  
....................    if(x > 0 && y > 0){  
00AA:  MOVF   2E,F
00AB:  BTFSC  03.2
00AC:  GOTO   0C2
00AD:  MOVF   2F,F
00AE:  BTFSC  03.2
00AF:  GOTO   0C2
....................       if(y > 1)  
00B0:  MOVF   2F,W
00B1:  SUBLW  01
00B2:  BTFSC  03.0
00B3:  GOTO   0B7
....................          address = lcd_line_two;  
00B4:  MOVLW  40
00B5:  MOVWF  30
....................       else  
00B6:  GOTO   0B8
....................          address=0;  
00B7:  CLRF   30
....................       address += x-1;  
00B8:  MOVLW  01
00B9:  SUBWF  2E,W
00BA:  ADDWF  30,F
....................       lcd_send_byte(0, 0x80 | address); // Manda cursor a la posición  
00BB:  MOVF   30,W
00BC:  IORLW  80
00BD:  MOVWF  31
00BE:  CLRF   32
00BF:  MOVF   31,W
00C0:  MOVWF  33
00C1:  CALL   050
....................    }  
.................... }  
00C2:  RETLW  00
....................  
.................... void lcd_putc(char c){  
....................     if(c>'\0'){  
*
00CF:  MOVF   2D,F
00D0:  BTFSC  03.2
00D1:  GOTO   10E
....................       switch(c){  
00D2:  MOVF   2D,W
00D3:  XORLW  0C
00D4:  BTFSC  03.2
00D5:  GOTO   0E0
00D6:  XORLW  06
00D7:  BTFSC  03.2
00D8:  GOTO   0EC
00D9:  XORLW  02
00DA:  BTFSC  03.2
00DB:  GOTO   0F5
00DC:  XORLW  01
00DD:  BTFSC  03.2
00DE:  GOTO   0FD
00DF:  GOTO   105
....................          case '\f':  
....................             lcd_send_byte(0,1);  
00E0:  CLRF   32
00E1:  MOVLW  01
00E2:  MOVWF  33
00E3:  CALL   050
....................             lcd_send_byte(0,2);  
00E4:  CLRF   32
00E5:  MOVLW  02
00E6:  MOVWF  33
00E7:  CALL   050
....................             delay_ms(2);  
00E8:  MOVLW  02
00E9:  MOVWF  2E
00EA:  CALL   00C
....................             break;  
00EB:  GOTO   10E
....................          case '\n':  
....................             lcd_gotoxy(1,2);  
00EC:  MOVLW  01
00ED:  MOVWF  2E
00EE:  MOVLW  02
00EF:  MOVWF  2F
00F0:  CALL   0AA
....................             delay_ms(2);  
00F1:  MOVLW  02
00F2:  MOVWF  2E
00F3:  CALL   00C
....................             break;  
00F4:  GOTO   10E
....................          case '\b':  
....................             lcd_send_byte(0,0x10);  
00F5:  CLRF   32
00F6:  MOVLW  10
00F7:  MOVWF  33
00F8:  CALL   050
....................             delay_ms(2);  
00F9:  MOVLW  02
00FA:  MOVWF  2E
00FB:  CALL   00C
....................             break;  
00FC:  GOTO   10E
....................          case '\t':  
....................             lcd_send_byte(0,0x14);  
00FD:  CLRF   32
00FE:  MOVLW  14
00FF:  MOVWF  33
0100:  CALL   050
....................             delay_ms(2);  
0101:  MOVLW  02
0102:  MOVWF  2E
0103:  CALL   00C
....................             break;  
0104:  GOTO   10E
....................          default:  
....................             lcd_send_byte(1,c);  
0105:  MOVLW  01
0106:  MOVWF  32
0107:  MOVF   2D,W
0108:  MOVWF  33
0109:  CALL   050
....................             delay_ms(2);  
010A:  MOVLW  02
010B:  MOVWF  2E
010C:  CALL   00C
....................             break;  
010D:  GOTO   10E
....................       }  
....................    }  
.................... }  
010E:  BCF    0A.3
010F:  BCF    0A.4
0110:  GOTO   140 (RETURN)
....................  
....................  
.................... void lcd_setcursor(short visible, short blink) {  
....................    lcd_send_byte(0, 0xC|(visible<<1)|blink);  
*
00C3:  BCF    03.0
00C4:  RLF    2B,W
00C5:  IORLW  0C
00C6:  IORWF  2C,W
00C7:  MOVWF  2E
00C8:  CLRF   32
00C9:  MOVF   2E,W
00CA:  MOVWF  33
00CB:  CALL   050
.................... }  
00CC:  BCF    0A.3
00CD:  BCF    0A.4
00CE:  GOTO   130 (RETURN)
....................  
....................  
.................... void main() { 
*
0111:  CLRF   04
0112:  BCF    03.7
0113:  MOVLW  1F
0114:  ANDWF  03,F
0115:  BSF    03.5
0116:  BSF    1F.0
0117:  BSF    1F.1
0118:  BSF    1F.2
0119:  BCF    1F.3
011A:  MOVLW  07
011B:  MOVWF  1C
....................  
....................    int i; 
....................    char teste[9]; 
....................     
....................    teste[0] = 'F'; 
011C:  MOVLW  46
011D:  BCF    03.5
011E:  MOVWF  22
....................    teste[1] = 'a'; 
011F:  MOVLW  61
0120:  MOVWF  23
....................    teste[2] = 'b'; 
0121:  MOVLW  62
0122:  MOVWF  24
....................    teste[3] = 'i'; 
0123:  MOVLW  69
0124:  MOVWF  25
....................    teste[4] = 'o'; 
0125:  MOVLW  6F
0126:  MOVWF  26
....................  
....................     
....................  
....................    lcd_init(); 
0127:  GOTO   07B
....................    lcd_gotoxy(1,1); // posiciona o cursor x=coluna y=linha 
0128:  MOVLW  01
0129:  MOVWF  2E
012A:  MOVWF  2F
012B:  CALL   0AA
....................    lcd_setcursor(1,1); // deixa o cursor piscando: primeiro 1 mostra ou nao o _ / segundo 1 pisca ou não o cursor 
012C:  MOVLW  01
012D:  MOVWF  2B
012E:  MOVWF  2C
012F:  GOTO   0C3
....................     
....................    printf(lcd_putc, "%s", teste); // mostra valores maiores de 255 
0130:  MOVLW  22
0131:  MOVWF  04
0132:  BCF    03.7
0133:  MOVLW  00
0134:  IORWF  00,W
0135:  BTFSC  03.2
0136:  GOTO   147
0137:  CLRF   2C
0138:  MOVF   04,W
0139:  MOVWF  2B
013A:  BCF    2C.0
013B:  BTFSC  03.7
013C:  BSF    2C.0
013D:  MOVF   00,W
013E:  MOVWF  2D
013F:  GOTO   0CF
0140:  MOVF   2B,W
0141:  MOVWF  04
0142:  BCF    03.7
0143:  BTFSC  2C.0
0144:  BSF    03.7
0145:  INCF   04,F
0146:  GOTO   133
....................     
.................... /*    
....................    lcd_putc('\f'); // limpa o display 
....................     
....................    printf(lcd_putc, "%lu", 1223); // mostra valores maiores de 255 
....................    delay_ms(1000); 
....................     
....................    printf(lcd_putc, "%lx", 1223); // mostra valor hexadecimal (long_hexadecimal) 
....................    delay_ms(1000); 
....................     
....................    for(i=0;i<=9;i++) { 
....................       printf(lcd_putc, "%u", i); // imprime algo na tela (%u : para imprimir números inteiros) 
....................       delay_ms(500); 
....................    } 
.................... */    
.................... } 
0147:  SLEEP

Configuration Fuses:
   Word  1: 1F72   HS NOWDT PUT PROTECT NODEBUG BROWNOUT NOLVP NOCPD NOWRT
