CCS PCM C Compiler, Version 4.038, 33467               14-mai-10 10:32

               Filename: C:\Users\Fabio Dela Bruna\Documents\Curso de Ciência da Computação\7º Semestre\Arquitetura de Microcontroladores - Prof. Fernando Kestering Longo\Exercícios\programas_c\teste_display_lcd-key_pad\teste2.lst

               ROM used: 480 words (6%)
                         Largest free fragment is 2048
               RAM used: 9 (2%) at main() level
                         17 (5%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1B8
0003:  NOP
.................... #include "16F877A.h" 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses HS, PROTECT, NOLVP 
.................... #use delay(clock=20Mhz) 
000C:  MOVLW  23
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETLW  00
.................... #include <lcd_4.c> 
.................... #define LCD_DB4   PIN_B4 // NIBLE de dados  
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
.................... #define LCD_RS    PIN_B2  
.................... #define LCD_E     PIN_B3  
.................... //#define USE_LCD_RW   1  
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................    0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................    0xc,                    // Display on  
....................    1,                      // Clear display  
....................    6                       // Increment cursor  
....................  };  
....................  
.................... void lcd_send_nibble(int8 nibble){  
....................    // Obs:  !! converte uma exprecao inteira  
....................    // para uma booleana (1 or 0).  
....................    output_bit(LCD_DB4, !!(nibble & 1));  
0020:  BTFSC  2A.0
0021:  GOTO   024
0022:  BCF    06.4
0023:  GOTO   025
0024:  BSF    06.4
0025:  BSF    03.5
0026:  BCF    06.4
....................    output_bit(LCD_DB5, !!(nibble & 2));  
0027:  BCF    03.5
0028:  BTFSC  2A.1
0029:  GOTO   02C
002A:  BCF    06.5
002B:  GOTO   02D
002C:  BSF    06.5
002D:  BSF    03.5
002E:  BCF    06.5
....................    output_bit(LCD_DB6, !!(nibble & 4));  
002F:  BCF    03.5
0030:  BTFSC  2A.2
0031:  GOTO   034
0032:  BCF    06.6
0033:  GOTO   035
0034:  BSF    06.6
0035:  BSF    03.5
0036:  BCF    06.6
....................    output_bit(LCD_DB7, !!(nibble & 8));  
0037:  BCF    03.5
0038:  BTFSC  2A.3
0039:  GOTO   03C
003A:  BCF    06.7
003B:  GOTO   03D
003C:  BSF    06.7
003D:  BSF    03.5
003E:  BCF    06.7
....................    delay_cycles(1);  
003F:  NOP
....................    output_high(LCD_E);  
0040:  BCF    06.3
0041:  BCF    03.5
0042:  BSF    06.3
....................    delay_us(2);  
0043:  MOVLW  03
0044:  MOVWF  77
0045:  DECFSZ 77,F
0046:  GOTO   045
....................    output_low(LCD_E);  
0047:  BSF    03.5
0048:  BCF    06.3
0049:  BCF    03.5
004A:  BCF    06.3
....................    delay_us(2);//teste  
004B:  MOVLW  03
004C:  MOVWF  77
004D:  DECFSZ 77,F
004E:  GOTO   04D
.................... }  
004F:  RETLW  00
.................... // Envia um byte para o LCD.  
.................... void lcd_send_byte(int8 address, int8 n){  
....................    output_low(LCD_RS);  
0050:  BSF    03.5
0051:  BCF    06.2
0052:  BCF    03.5
0053:  BCF    06.2
....................    delay_us(60);  
0054:  MOVLW  63
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  GOTO   059
....................    if(address)  
0059:  MOVF   27,F
005A:  BTFSC  03.2
005B:  GOTO   061
....................       output_high(LCD_RS);  
005C:  BSF    03.5
005D:  BCF    06.2
005E:  BCF    03.5
005F:  BSF    06.2
....................    else  
0060:  GOTO   065
....................       output_low(LCD_RS);  
0061:  BSF    03.5
0062:  BCF    06.2
0063:  BCF    03.5
0064:  BCF    06.2
....................    delay_cycles(1);  
0065:  NOP
....................    output_low(LCD_E);  
0066:  BSF    03.5
0067:  BCF    06.3
0068:  BCF    03.5
0069:  BCF    06.3
....................    lcd_send_nibble(n >> 4);  
006A:  SWAPF  28,W
006B:  MOVWF  29
006C:  MOVLW  0F
006D:  ANDWF  29,F
006E:  MOVF   29,W
006F:  MOVWF  2A
0070:  CALL   020
....................    delay_us(2); //teste  
0071:  MOVLW  03
0072:  MOVWF  77
0073:  DECFSZ 77,F
0074:  GOTO   073
....................    lcd_send_nibble(n & 0xf);  
0075:  MOVF   28,W
0076:  ANDLW  0F
0077:  MOVWF  29
0078:  MOVWF  2A
0079:  CALL   020
.................... }  
007A:  RETLW  00
.................... void lcd_init(void){  
....................    int8 i;  
....................    output_low(LCD_RS);  
007B:  BSF    03.5
007C:  BCF    06.2
007D:  BCF    03.5
007E:  BCF    06.2
....................    output_low(LCD_E);  
007F:  BSF    03.5
0080:  BCF    06.3
0081:  BCF    03.5
0082:  BCF    06.3
....................    delay_ms(15);  
0083:  MOVLW  0F
0084:  MOVWF  23
0085:  CALL   00C
....................    for(i=0 ;i < 3; i++){  
0086:  CLRF   22
0087:  MOVF   22,W
0088:  SUBLW  02
0089:  BTFSS  03.0
008A:  GOTO   093
....................       lcd_send_nibble(0x03);  
008B:  MOVLW  03
008C:  MOVWF  2A
008D:  CALL   020
....................       delay_ms(5);  
008E:  MOVLW  05
008F:  MOVWF  23
0090:  CALL   00C
....................    }  
0091:  INCF   22,F
0092:  GOTO   087
....................    lcd_send_nibble(0x02);  
0093:  MOVLW  02
0094:  MOVWF  2A
0095:  CALL   020
....................    for(i=0; i < sizeof(LCD_INIT_STRING); i++){  
0096:  CLRF   22
0097:  MOVF   22,W
0098:  SUBLW  03
0099:  BTFSS  03.0
009A:  GOTO   0A4
....................       lcd_send_byte(0, LCD_INIT_STRING[i]);  
009B:  MOVF   22,W
009C:  CALL   004
009D:  MOVWF  23
009E:  CLRF   27
009F:  MOVF   23,W
00A0:  MOVWF  28
00A1:  CALL   050
....................     }  
00A2:  INCF   22,F
00A3:  GOTO   097
....................    delay_ms(15);  
00A4:  MOVLW  0F
00A5:  MOVWF  23
00A6:  CALL   00C
.................... }  
00A7:  BCF    0A.3
00A8:  BCF    0A.4
00A9:  GOTO   1C9 (RETURN)
.................... // Posicoes válidas:  
.................... // de x=1 a x=16 y  
.................... // de y=1 a y=2  
.................... void lcd_gotoxy(int8 x, int8 y){  
....................    int8 address;  
....................    if(x > 0 && y > 0){  
00AA:  MOVF   23,F
00AB:  BTFSC  03.2
00AC:  GOTO   0C2
00AD:  MOVF   24,F
00AE:  BTFSC  03.2
00AF:  GOTO   0C2
....................       if(y > 1)  
00B0:  MOVF   24,W
00B1:  SUBLW  01
00B2:  BTFSC  03.0
00B3:  GOTO   0B7
....................          address = lcd_line_two;  
00B4:  MOVLW  40
00B5:  MOVWF  25
....................       else  
00B6:  GOTO   0B8
....................          address=0;  
00B7:  CLRF   25
....................       address += x-1;  
00B8:  MOVLW  01
00B9:  SUBWF  23,W
00BA:  ADDWF  25,F
....................       lcd_send_byte(0, 0x80 | address); // Manda cursor a la posición  
00BB:  MOVF   25,W
00BC:  IORLW  80
00BD:  MOVWF  26
00BE:  CLRF   27
00BF:  MOVF   26,W
00C0:  MOVWF  28
00C1:  CALL   050
....................    }  
.................... }  
00C2:  RETLW  00
....................  
.................... void lcd_putc(char c){  
....................     if(c>'\0'){  
*
0176:  MOVF   22,F
0177:  BTFSC  03.2
0178:  GOTO   1B5
....................       switch(c){  
0179:  MOVF   22,W
017A:  XORLW  0C
017B:  BTFSC  03.2
017C:  GOTO   187
017D:  XORLW  06
017E:  BTFSC  03.2
017F:  GOTO   193
0180:  XORLW  02
0181:  BTFSC  03.2
0182:  GOTO   19C
0183:  XORLW  01
0184:  BTFSC  03.2
0185:  GOTO   1A4
0186:  GOTO   1AC
....................          case '\f':  
....................             lcd_send_byte(0,1);  
0187:  CLRF   27
0188:  MOVLW  01
0189:  MOVWF  28
018A:  CALL   050
....................             lcd_send_byte(0,2);  
018B:  CLRF   27
018C:  MOVLW  02
018D:  MOVWF  28
018E:  CALL   050
....................             delay_ms(2);  
018F:  MOVLW  02
0190:  MOVWF  23
0191:  CALL   00C
....................             break;  
0192:  GOTO   1B5
....................          case '\n':  
....................             lcd_gotoxy(1,2);  
0193:  MOVLW  01
0194:  MOVWF  23
0195:  MOVLW  02
0196:  MOVWF  24
0197:  CALL   0AA
....................             delay_ms(2);  
0198:  MOVLW  02
0199:  MOVWF  23
019A:  CALL   00C
....................             break;  
019B:  GOTO   1B5
....................          case '\b':  
....................             lcd_send_byte(0,0x10);  
019C:  CLRF   27
019D:  MOVLW  10
019E:  MOVWF  28
019F:  CALL   050
....................             delay_ms(2);  
01A0:  MOVLW  02
01A1:  MOVWF  23
01A2:  CALL   00C
....................             break;  
01A3:  GOTO   1B5
....................          case '\t':  
....................             lcd_send_byte(0,0x14);  
01A4:  CLRF   27
01A5:  MOVLW  14
01A6:  MOVWF  28
01A7:  CALL   050
....................             delay_ms(2);  
01A8:  MOVLW  02
01A9:  MOVWF  23
01AA:  CALL   00C
....................             break;  
01AB:  GOTO   1B5
....................          default:  
....................             lcd_send_byte(1,c);  
01AC:  MOVLW  01
01AD:  MOVWF  27
01AE:  MOVF   22,W
01AF:  MOVWF  28
01B0:  CALL   050
....................             delay_ms(2);  
01B1:  MOVLW  02
01B2:  MOVWF  23
01B3:  CALL   00C
....................             break;  
01B4:  GOTO   1B5
....................       }  
....................    }  
.................... }  
01B5:  BCF    0A.3
01B6:  BCF    0A.4
01B7:  GOTO   1D7 (RETURN)
....................  
....................  
.................... void lcd_setcursor(short visible, short blink) {  
....................    lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
....................  
.................... // declara uma função... 
.................... char leTeclado(); 
....................  
....................  
.................... void main() { 
01B8:  CLRF   04
01B9:  BCF    03.7
01BA:  MOVLW  1F
01BB:  ANDWF  03,F
01BC:  BSF    03.5
01BD:  BSF    1F.0
01BE:  BSF    1F.1
01BF:  BSF    1F.2
01C0:  BCF    1F.3
01C1:  MOVLW  07
01C2:  MOVWF  1C
....................  
....................    char c = ' '; 
*
01C6:  MOVLW  20
01C7:  MOVWF  21
....................    lcd_init(); 
01C8:  GOTO   07B
....................    lcd_gotoxy(1,1); 
01C9:  MOVLW  01
01CA:  MOVWF  23
01CB:  MOVWF  24
01CC:  CALL   0AA
.................... //   lcd_setcursor(1,1); 
....................  
....................    while(true){ 
....................     
....................       c = leTeclado(); 
01CD:  GOTO   0C3
01CE:  MOVF   78,W
01CF:  MOVWF  21
....................        
....................       if(c != ' ') { 
01D0:  MOVF   21,W
01D1:  SUBLW  20
01D2:  BTFSC  03.2
01D3:  GOTO   1DE
....................          printf(lcd_putc, "%c", c); 
01D4:  MOVF   21,W
01D5:  MOVWF  22
01D6:  GOTO   176
....................          delay_ms(300); 
01D7:  MOVLW  02
01D8:  MOVWF  22
01D9:  MOVLW  96
01DA:  MOVWF  23
01DB:  CALL   00C
01DC:  DECFSZ 22,F
01DD:  GOTO   1D9
....................       } 
....................        
....................    } 
01DE:  GOTO   1CD
....................     
.................... } 
....................  
....................  
.................... // implementação da função leTeclado 
.................... char leTeclado() { 
....................     
01DF:  SLEEP
....................    // seleciona a primeira coluna do teclado 
....................    output_high(pin_c2);  
*
00C3:  BCF    20.2
00C4:  MOVF   20,W
00C5:  BSF    03.5
00C6:  MOVWF  07
00C7:  BCF    03.5
00C8:  BSF    07.2
*
01C3:  MOVLW  FF
01C4:  BCF    03.5
01C5:  MOVWF  20
....................    output_low(pin_c1);   
*
00C9:  BCF    20.1
00CA:  MOVF   20,W
00CB:  BSF    03.5
00CC:  MOVWF  07
00CD:  BCF    03.5
00CE:  BCF    07.1
....................    output_low(pin_c0);  
00CF:  BCF    20.0
00D0:  MOVF   20,W
00D1:  BSF    03.5
00D2:  MOVWF  07
00D3:  BCF    03.5
00D4:  BCF    07.0
....................     
....................    // resolve a leitura da primeira coluna 
....................    if(input(pin_c3)){    
00D5:  BSF    20.3
00D6:  MOVF   20,W
00D7:  BSF    03.5
00D8:  MOVWF  07
00D9:  BCF    03.5
00DA:  BTFSS  07.3
00DB:  GOTO   0DF
....................       return '1';    
00DC:  MOVLW  31
00DD:  MOVWF  78
00DE:  GOTO   173
....................    } 
....................    if(input(pin_c4)){     
00DF:  BSF    20.4
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  BCF    03.5
00E4:  BTFSS  07.4
00E5:  GOTO   0E9
....................       return '4';     
00E6:  MOVLW  34
00E7:  MOVWF  78
00E8:  GOTO   173
....................    } 
....................    if(input(pin_c5)){     
00E9:  BSF    20.5
00EA:  MOVF   20,W
00EB:  BSF    03.5
00EC:  MOVWF  07
00ED:  BCF    03.5
00EE:  BTFSS  07.5
00EF:  GOTO   0F3
....................       return '7';     
00F0:  MOVLW  37
00F1:  MOVWF  78
00F2:  GOTO   173
....................    } 
....................    if(input(pin_c6)){     
00F3:  BSF    20.6
00F4:  MOVF   20,W
00F5:  BSF    03.5
00F6:  MOVWF  07
00F7:  BCF    03.5
00F8:  BTFSS  07.6
00F9:  GOTO   0FD
....................       return '*';        
00FA:  MOVLW  2A
00FB:  MOVWF  78
00FC:  GOTO   173
....................    } 
....................     
....................     
....................    // seleciona a segunda coluna do teclado 
....................    output_low(pin_c2);  
00FD:  BCF    20.2
00FE:  MOVF   20,W
00FF:  BSF    03.5
0100:  MOVWF  07
0101:  BCF    03.5
0102:  BCF    07.2
....................    output_high(pin_c1);   
0103:  BCF    20.1
0104:  MOVF   20,W
0105:  BSF    03.5
0106:  MOVWF  07
0107:  BCF    03.5
0108:  BSF    07.1
....................    output_low(pin_c0);  
0109:  BCF    20.0
010A:  MOVF   20,W
010B:  BSF    03.5
010C:  MOVWF  07
010D:  BCF    03.5
010E:  BCF    07.0
....................     
....................    // resolve a leitura da segunda coluna 
....................    if(input(pin_c3)){     
010F:  BSF    20.3
0110:  MOVF   20,W
0111:  BSF    03.5
0112:  MOVWF  07
0113:  BCF    03.5
0114:  BTFSS  07.3
0115:  GOTO   119
....................       return '2';     
0116:  MOVLW  32
0117:  MOVWF  78
0118:  GOTO   173
....................    } 
....................    if(input(pin_c4)){     
0119:  BSF    20.4
011A:  MOVF   20,W
011B:  BSF    03.5
011C:  MOVWF  07
011D:  BCF    03.5
011E:  BTFSS  07.4
011F:  GOTO   123
....................       return '5';     
0120:  MOVLW  35
0121:  MOVWF  78
0122:  GOTO   173
....................    } 
....................    if(input(pin_c5)){     
0123:  BSF    20.5
0124:  MOVF   20,W
0125:  BSF    03.5
0126:  MOVWF  07
0127:  BCF    03.5
0128:  BTFSS  07.5
0129:  GOTO   12D
....................       return '8';     
012A:  MOVLW  38
012B:  MOVWF  78
012C:  GOTO   173
....................    } 
....................    if(input(pin_c6)){     
012D:  BSF    20.6
012E:  MOVF   20,W
012F:  BSF    03.5
0130:  MOVWF  07
0131:  BCF    03.5
0132:  BTFSS  07.6
0133:  GOTO   137
....................       return '0';     
0134:  MOVLW  30
0135:  MOVWF  78
0136:  GOTO   173
....................    } 
....................     
....................     
....................    // seleciona a primeira coluna do teclado 
....................    output_low(pin_c2);  
0137:  BCF    20.2
0138:  MOVF   20,W
0139:  BSF    03.5
013A:  MOVWF  07
013B:  BCF    03.5
013C:  BCF    07.2
....................    output_low(pin_c1);   
013D:  BCF    20.1
013E:  MOVF   20,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  BCF    03.5
0142:  BCF    07.1
....................    output_high(pin_c0);  
0143:  BCF    20.0
0144:  MOVF   20,W
0145:  BSF    03.5
0146:  MOVWF  07
0147:  BCF    03.5
0148:  BSF    07.0
....................     
....................    // resolve a leitura da primeira coluna 
....................    if(input(pin_c3)){     
0149:  BSF    20.3
014A:  MOVF   20,W
014B:  BSF    03.5
014C:  MOVWF  07
014D:  BCF    03.5
014E:  BTFSS  07.3
014F:  GOTO   153
....................       return '3';     
0150:  MOVLW  33
0151:  MOVWF  78
0152:  GOTO   173
....................    } 
....................    if(input(pin_c4)){     
0153:  BSF    20.4
0154:  MOVF   20,W
0155:  BSF    03.5
0156:  MOVWF  07
0157:  BCF    03.5
0158:  BTFSS  07.4
0159:  GOTO   15D
....................       return '6';     
015A:  MOVLW  36
015B:  MOVWF  78
015C:  GOTO   173
....................    } 
....................    if(input(pin_c5)){     
015D:  BSF    20.5
015E:  MOVF   20,W
015F:  BSF    03.5
0160:  MOVWF  07
0161:  BCF    03.5
0162:  BTFSS  07.5
0163:  GOTO   167
....................       return '9';     
0164:  MOVLW  39
0165:  MOVWF  78
0166:  GOTO   173
....................    } 
....................    if(input(pin_c6)){     
0167:  BSF    20.6
0168:  MOVF   20,W
0169:  BSF    03.5
016A:  MOVWF  07
016B:  BCF    03.5
016C:  BTFSS  07.6
016D:  GOTO   171
....................       return '#';     
016E:  MOVLW  23
016F:  MOVWF  78
0170:  GOTO   173
....................    } 
....................     
....................    // se nenhum botão for pressionado retorna vazio 
....................    return ' '; 
0171:  MOVLW  20
0172:  MOVWF  78
....................     
.................... } 
0173:  BCF    0A.3
0174:  BCF    0A.4
0175:  GOTO   1CE (RETURN)

Configuration Fuses:
   Word  1: 1F72   HS NOWDT PUT PROTECT NODEBUG BROWNOUT NOLVP NOCPD NOWRT
