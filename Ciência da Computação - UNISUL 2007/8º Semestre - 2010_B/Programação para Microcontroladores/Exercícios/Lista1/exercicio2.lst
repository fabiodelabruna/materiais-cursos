CCS PCM C Compiler, Version 4.093, 5065               19-Aðu-10 10:51

               Filename: C:\Documents and Settings\lab.academico\Desktop\PIC\Exercícios\Lista1\exercicio2.lst

               ROM used: 342 words (4%)
                         Largest free fragment is 2048
               RAM used: 24 (7%) at main() level
                         33 (9%) worst case
               Stack:    4 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   10B
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses XT, PROTECT 
.................... #use delay(clock=4Mhz) 
001C:  MOVLW  34
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  01
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  4A
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETLW  00
.................... #include <Lcd_4.c> 
.................... #define LCD_DB4   PIN_D4 // NIBLE de dados  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
.................... #define LCD_RS    PIN_E2  
.................... #define LCD_E     PIN_E1  
.................... //#define USE_LCD_RW   1  
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................    0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................    0xc,                    // Display on  
....................    1,                      // Clear display  
....................    6                       // Increment cursor  
....................  };  
....................  
.................... void lcd_send_nibble(int8 nibble){  
....................    // Obs:  !! converte uma exprecao inteira  
....................    // para uma booleana (1 or 0).  
....................    output_bit(LCD_DB4, !!(nibble & 1));  
0031:  BTFSC  3B.0
0032:  GOTO   035
0033:  BCF    08.4
0034:  GOTO   036
0035:  BSF    08.4
0036:  BSF    03.5
0037:  BCF    08.4
....................    output_bit(LCD_DB5, !!(nibble & 2));  
0038:  BCF    03.5
0039:  BTFSC  3B.1
003A:  GOTO   03D
003B:  BCF    08.5
003C:  GOTO   03E
003D:  BSF    08.5
003E:  BSF    03.5
003F:  BCF    08.5
....................    output_bit(LCD_DB6, !!(nibble & 4));  
0040:  BCF    03.5
0041:  BTFSC  3B.2
0042:  GOTO   045
0043:  BCF    08.6
0044:  GOTO   046
0045:  BSF    08.6
0046:  BSF    03.5
0047:  BCF    08.6
....................    output_bit(LCD_DB7, !!(nibble & 8));  
0048:  BCF    03.5
0049:  BTFSC  3B.3
004A:  GOTO   04D
004B:  BCF    08.7
004C:  GOTO   04E
004D:  BSF    08.7
004E:  BSF    03.5
004F:  BCF    08.7
....................    delay_cycles(1);  
0050:  NOP
....................    output_high(LCD_E);  
0051:  BCF    09.1
0052:  BCF    03.5
0053:  BSF    09.1
....................    delay_us(2);  
0054:  GOTO   055
....................    output_low(LCD_E);  
0055:  BSF    03.5
0056:  BCF    09.1
0057:  BCF    03.5
0058:  BCF    09.1
....................    delay_us(2);//teste  
0059:  GOTO   05A
.................... }  
005A:  RETLW  00
.................... // Envia um byte para o LCD.  
.................... void lcd_send_byte(int8 address, int8 n){  
....................    output_low(LCD_RS);  
005B:  BSF    03.5
005C:  BCF    09.2
005D:  BCF    03.5
005E:  BCF    09.2
....................    delay_us(60);  
005F:  MOVLW  13
0060:  MOVWF  77
0061:  DECFSZ 77,F
0062:  GOTO   061
0063:  GOTO   064
....................    if(address)  
0064:  MOVF   38,F
0065:  BTFSC  03.2
0066:  GOTO   06C
....................       output_high(LCD_RS);  
0067:  BSF    03.5
0068:  BCF    09.2
0069:  BCF    03.5
006A:  BSF    09.2
....................    else  
006B:  GOTO   070
....................       output_low(LCD_RS);  
006C:  BSF    03.5
006D:  BCF    09.2
006E:  BCF    03.5
006F:  BCF    09.2
....................    delay_cycles(1);  
0070:  NOP
....................    output_low(LCD_E);  
0071:  BSF    03.5
0072:  BCF    09.1
0073:  BCF    03.5
0074:  BCF    09.1
....................    lcd_send_nibble(n >> 4);  
0075:  SWAPF  39,W
0076:  MOVWF  3A
0077:  MOVLW  0F
0078:  ANDWF  3A,F
0079:  MOVF   3A,W
007A:  MOVWF  3B
007B:  CALL   031
....................    delay_us(2); //teste  
007C:  GOTO   07D
....................    lcd_send_nibble(n & 0xf);  
007D:  MOVF   39,W
007E:  ANDLW  0F
007F:  MOVWF  3A
0080:  MOVWF  3B
0081:  CALL   031
.................... }  
0082:  RETLW  00
.................... void lcd_init(void){  
....................    int8 i;  
....................    output_low(LCD_RS);  
0083:  BSF    03.5
0084:  BCF    09.2
0085:  BCF    03.5
0086:  BCF    09.2
....................    output_low(LCD_E);  
0087:  BSF    03.5
0088:  BCF    09.1
0089:  BCF    03.5
008A:  BCF    09.1
....................    delay_ms(15);  
008B:  MOVLW  0F
008C:  MOVWF  34
008D:  CALL   01C
....................    for(i=0 ;i < 3; i++){  
008E:  CLRF   32
008F:  MOVF   32,W
0090:  SUBLW  02
0091:  BTFSS  03.0
0092:  GOTO   09B
....................       lcd_send_nibble(0x03);  
0093:  MOVLW  03
0094:  MOVWF  3B
0095:  CALL   031
....................       delay_ms(5);  
0096:  MOVLW  05
0097:  MOVWF  34
0098:  CALL   01C
....................    }  
0099:  INCF   32,F
009A:  GOTO   08F
....................    lcd_send_nibble(0x02);  
009B:  MOVLW  02
009C:  MOVWF  3B
009D:  CALL   031
....................    for(i=0; i < sizeof(LCD_INIT_STRING); i++){  
009E:  CLRF   32
009F:  MOVF   32,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AC
....................       lcd_send_byte(0, LCD_INIT_STRING[i]);  
00A3:  MOVF   32,W
00A4:  CALL   004
00A5:  MOVWF  33
00A6:  CLRF   38
00A7:  MOVF   33,W
00A8:  MOVWF  39
00A9:  CALL   05B
....................     }  
00AA:  INCF   32,F
00AB:  GOTO   09F
....................    delay_ms(15);  
00AC:  MOVLW  0F
00AD:  MOVWF  34
00AE:  CALL   01C
.................... }  
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   123 (RETURN)
.................... // Posicoes válidas:  
.................... // de x=1 a x=16 y  
.................... // de y=1 a y=2  
.................... void lcd_gotoxy(int8 x, int8 y){  
....................    int8 address;  
....................    if(x > 0 && y > 0){  
00B2:  MOVF   34,F
00B3:  BTFSC  03.2
00B4:  GOTO   0CA
00B5:  MOVF   35,F
00B6:  BTFSC  03.2
00B7:  GOTO   0CA
....................       if(y > 1)  
00B8:  MOVF   35,W
00B9:  SUBLW  01
00BA:  BTFSC  03.0
00BB:  GOTO   0BF
....................          address = lcd_line_two;  
00BC:  MOVLW  40
00BD:  MOVWF  36
....................       else  
00BE:  GOTO   0C0
....................          address=0;  
00BF:  CLRF   36
....................       address += x-1;  
00C0:  MOVLW  01
00C1:  SUBWF  34,W
00C2:  ADDWF  36,F
....................       lcd_send_byte(0, 0x80 | address); // Manda cursor a la posición  
00C3:  MOVF   36,W
00C4:  IORLW  80
00C5:  MOVWF  37
00C6:  CLRF   38
00C7:  MOVF   37,W
00C8:  MOVWF  39
00C9:  CALL   05B
....................    }  
.................... }  
00CA:  RETLW  00
....................  
.................... void lcd_putc(char c){  
....................     if(c>'\0'){  
00CB:  MOVF   33,F
00CC:  BTFSC  03.2
00CD:  GOTO   10A
....................       switch(c){  
00CE:  MOVF   33,W
00CF:  XORLW  0C
00D0:  BTFSC  03.2
00D1:  GOTO   0DC
00D2:  XORLW  06
00D3:  BTFSC  03.2
00D4:  GOTO   0E8
00D5:  XORLW  02
00D6:  BTFSC  03.2
00D7:  GOTO   0F1
00D8:  XORLW  01
00D9:  BTFSC  03.2
00DA:  GOTO   0F9
00DB:  GOTO   101
....................          case '\f':  
....................             lcd_send_byte(0,1);  
00DC:  CLRF   38
00DD:  MOVLW  01
00DE:  MOVWF  39
00DF:  CALL   05B
....................             lcd_send_byte(0,2);  
00E0:  CLRF   38
00E1:  MOVLW  02
00E2:  MOVWF  39
00E3:  CALL   05B
....................             delay_ms(2);  
00E4:  MOVLW  02
00E5:  MOVWF  34
00E6:  CALL   01C
....................             break;  
00E7:  GOTO   10A
....................          case '\n':  
....................             lcd_gotoxy(1,2);  
00E8:  MOVLW  01
00E9:  MOVWF  34
00EA:  MOVLW  02
00EB:  MOVWF  35
00EC:  CALL   0B2
....................             delay_ms(2);  
00ED:  MOVLW  02
00EE:  MOVWF  34
00EF:  CALL   01C
....................             break;  
00F0:  GOTO   10A
....................          case '\b':  
....................             lcd_send_byte(0,0x10);  
00F1:  CLRF   38
00F2:  MOVLW  10
00F3:  MOVWF  39
00F4:  CALL   05B
....................             delay_ms(2);  
00F5:  MOVLW  02
00F6:  MOVWF  34
00F7:  CALL   01C
....................             break;  
00F8:  GOTO   10A
....................          case '\t':  
....................             lcd_send_byte(0,0x14);  
00F9:  CLRF   38
00FA:  MOVLW  14
00FB:  MOVWF  39
00FC:  CALL   05B
....................             delay_ms(2);  
00FD:  MOVLW  02
00FE:  MOVWF  34
00FF:  CALL   01C
....................             break;  
0100:  GOTO   10A
....................          default:  
....................             lcd_send_byte(1,c);  
0101:  MOVLW  01
0102:  MOVWF  38
0103:  MOVF   33,W
0104:  MOVWF  39
0105:  CALL   05B
....................             delay_ms(2);  
0106:  MOVLW  02
0107:  MOVWF  34
0108:  CALL   01C
....................             break;  
0109:  GOTO   10A
....................       }  
....................    }  
.................... }  
010A:  RETLW  00
....................  
....................  
.................... void lcd_setcursor(short visible, short blink) {  
....................    lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7) 
....................  
....................  
....................  
....................  
.................... void main() { 
010B:  CLRF   04
010C:  BCF    03.7
010D:  MOVLW  1F
010E:  ANDWF  03,F
010F:  MOVLW  19
0110:  BSF    03.5
0111:  MOVWF  19
0112:  MOVLW  A6
0113:  MOVWF  18
0114:  MOVLW  90
0115:  BCF    03.5
0116:  MOVWF  18
0117:  BSF    03.5
0118:  BSF    1F.0
0119:  BSF    1F.1
011A:  BSF    1F.2
011B:  BCF    1F.3
011C:  MOVLW  07
011D:  MOVWF  1C
....................  
....................    char c = ' '; 
011E:  MOVLW  20
011F:  BCF    03.5
0120:  MOVWF  21
....................    char msg[15]; 
....................    int1 bool = 0; 
0121:  BCF    31.0
....................    lcd_init(); 
0122:  GOTO   083
....................    lcd_gotoxy(0,0); 
0123:  CLRF   34
0124:  CLRF   35
0125:  CALL   0B2
....................  
....................    while(true) { 
....................  
....................       if(kbhit()) { 
0126:  BTFSS  0C.5
0127:  GOTO   154
....................        
....................          c = getc(); 
0128:  BTFSS  0C.5
0129:  GOTO   128
012A:  MOVF   1A,W
012B:  MOVWF  21
....................           
....................          if(c == 13) 
012C:  MOVF   21,W
012D:  SUBLW  0D
012E:  BTFSS  03.2
012F:  GOTO   13A
....................             printf(lcd_putc, "%S", "Fabio"); 
0130:  CLRF   32
0131:  MOVF   32,W
0132:  CALL   00C
0133:  IORLW  00
0134:  BTFSC  03.2
0135:  GOTO   13A
0136:  INCF   32,F
0137:  MOVWF  33
0138:  CALL   0CB
0139:  GOTO   131
....................             //printf(lcd_putc, "%S", c); 
....................              
....................             if(bool) { // se  estiver na primeira linha  
013A:  BTFSS  31.0
013B:  GOTO   142
....................                lcd_gotoxy(0,1); 
013C:  CLRF   34
013D:  MOVLW  01
013E:  MOVWF  35
013F:  CALL   0B2
....................                bool = 1; 
0140:  BSF    31.0
....................             } else { // se estiver na segunda linha 
0141:  GOTO   146
....................                lcd_gotoxy(0,0); 
0142:  CLRF   34
0143:  CLRF   35
0144:  CALL   0B2
....................                bool = 0;   
0145:  BCF    31.0
....................             } 
....................              
....................          if(c == 27) 
0146:  MOVF   21,W
0147:  SUBLW  1B
0148:  BTFSS  03.2
0149:  GOTO   154
....................             lcd_putc("\f");    
014A:  CLRF   32
014B:  MOVF   32,W
014C:  CALL   016
014D:  IORLW  00
014E:  BTFSC  03.2
014F:  GOTO   154
0150:  INCF   32,F
0151:  MOVWF  33
0152:  CALL   0CB
0153:  GOTO   14B
....................        
....................       } 
....................        
....................    
....................    } 
0154:  GOTO   126
....................  
.................... } 
....................  
0155:  SLEEP

Configuration Fuses:
   Word  1: 1F71   XT NOWDT PUT PROTECT NODEBUG BROWNOUT NOLVP NOCPD NOWRT
