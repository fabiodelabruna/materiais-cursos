CCS PCM C Compiler, Version 4.093, 5065               19-Aðu-10 10:46

               Filename: C:\Documents and Settings\lab.academico\Desktop\PIC\Exercícios\Teste_CanalAnalogico\teste_sensor_temp.lst

               ROM used: 779 words (10%)
                         Largest free fragment is 2048
               RAM used: 13 (4%) at main() level
                         37 (10%) worst case
               Stack:    2 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   24E
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... //#device adc=8 // define qual a resolução (configura as portas adc com 8 bits) 
.................... #device adc=10 // define qual a resolução (configura as portas adc com 10 bits) 
.................... #fuses XT, PROTECT 
.................... #use delay(clock=4Mhz) 
*
01F8:  MOVLW  26
01F9:  MOVWF  04
01FA:  BCF    03.7
01FB:  MOVF   00,W
01FC:  BTFSC  03.2
01FD:  GOTO   20C
01FE:  MOVLW  01
01FF:  MOVWF  78
0200:  CLRF   77
0201:  DECFSZ 77,F
0202:  GOTO   201
0203:  DECFSZ 78,F
0204:  GOTO   200
0205:  MOVLW  4A
0206:  MOVWF  77
0207:  DECFSZ 77,F
0208:  GOTO   207
0209:  GOTO   20A
020A:  DECFSZ 00,F
020B:  GOTO   1FE
020C:  BCF    0A.3
020D:  BCF    0A.4
020E:  GOTO   2C7 (RETURN)
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7) 
....................  
.................... #define COOLER pin_c2 
.................... #define RESISTOR pin_c1 
.................... #define TEMP_MAX 30 
.................... #define TEMP_MIN 25 
....................  
....................  
.................... int16 leAd(int canal); 
....................  
....................  
.................... void main() { 
*
024E:  CLRF   04
024F:  BCF    03.7
0250:  MOVLW  1F
0251:  ANDWF  03,F
0252:  MOVLW  19
0253:  BSF    03.5
0254:  MOVWF  19
0255:  MOVLW  A6
0256:  MOVWF  18
0257:  MOVLW  90
0258:  BCF    03.5
0259:  MOVWF  18
025A:  BSF    03.5
025B:  BSF    1F.0
025C:  BSF    1F.1
025D:  BSF    1F.2
025E:  BCF    1F.3
025F:  MOVLW  07
0260:  MOVWF  1C
....................  
....................    double temp = 0.0; 
*
0264:  CLRF   21
0265:  CLRF   22
0266:  CLRF   23
0267:  CLRF   24
....................     
....................  
....................    // define qual porta analogica será usada 
....................    //setup_adc_ports(RA0_ANALOG); 
....................    setup_adc_ports(AN0_AN1_AN3);  
0268:  BSF    03.5
0269:  BCF    1F.0
026A:  BCF    1F.1
026B:  BSF    1F.2
026C:  BCF    1F.3
....................    // informa qual o pulso de clock será usado (nesse caso, do cristal) 
....................    setup_adc(ADC_CLOCK_INTERNAL); 
026D:  BCF    1F.6
026E:  BCF    03.5
026F:  BSF    1F.6
0270:  BSF    1F.7
0271:  BSF    03.5
0272:  BSF    1F.7
0273:  BCF    03.5
0274:  BSF    1F.0
....................  
....................    while(true) { 
....................       temp = leAd(3)*0.48875; 
0275:  MOVLW  03
0276:  MOVWF  25
0277:  GOTO   018
0278:  MOVF   79,W
0279:  MOVWF  26
027A:  MOVF   78,W
027B:  MOVWF  25
027C:  MOVF   79,W
027D:  MOVWF  28
027E:  MOVF   78,W
027F:  MOVWF  27
0280:  GOTO   035
0281:  MOVF   7A,W
0282:  MOVWF  35
0283:  MOVF   79,W
0284:  MOVWF  34
0285:  MOVF   78,W
0286:  MOVWF  33
0287:  MOVF   77,W
0288:  MOVWF  32
0289:  MOVLW  71
028A:  MOVWF  39
028B:  MOVLW  3D
028C:  MOVWF  38
028D:  MOVLW  7A
028E:  MOVWF  37
028F:  MOVLW  7D
0290:  MOVWF  36
0291:  CALL   054
0292:  MOVF   7A,W
0293:  MOVWF  24
0294:  MOVF   79,W
0295:  MOVWF  23
0296:  MOVF   78,W
0297:  MOVWF  22
0298:  MOVF   77,W
0299:  MOVWF  21
....................       printf("Temp: %0.2f C\r\n", temp); 
029A:  CLRF   25
029B:  MOVF   25,W
029C:  CALL   004
029D:  INCF   25,F
029E:  MOVWF  77
029F:  MOVF   77,W
02A0:  BTFSS  0C.4
02A1:  GOTO   2A0
02A2:  MOVWF  19
02A3:  MOVLW  06
02A4:  SUBWF  25,W
02A5:  BTFSS  03.2
02A6:  GOTO   29B
02A7:  MOVLW  C9
02A8:  MOVWF  04
02A9:  MOVF   24,W
02AA:  MOVWF  28
02AB:  MOVF   23,W
02AC:  MOVWF  27
02AD:  MOVF   22,W
02AE:  MOVWF  26
02AF:  MOVF   21,W
02B0:  MOVWF  25
02B1:  MOVLW  02
02B2:  MOVWF  29
02B3:  GOTO   10B
02B4:  MOVLW  0B
02B5:  MOVWF  25
02B6:  MOVF   25,W
02B7:  CALL   004
02B8:  INCF   25,F
02B9:  MOVWF  77
02BA:  MOVF   77,W
02BB:  BTFSS  0C.4
02BC:  GOTO   2BB
02BD:  MOVWF  19
02BE:  MOVLW  0F
02BF:  SUBWF  25,W
02C0:  BTFSS  03.2
02C1:  GOTO   2B6
....................       delay_ms(1000); 
02C2:  MOVLW  04
02C3:  MOVWF  25
02C4:  MOVLW  FA
02C5:  MOVWF  26
02C6:  GOTO   1F8
02C7:  DECFSZ 25,F
02C8:  GOTO   2C4
....................       printf("%c", 0x0c); 
02C9:  MOVLW  0C
02CA:  BTFSS  0C.4
02CB:  GOTO   2CA
02CC:  MOVWF  19
....................        
....................       if(temp >= TEMP_MAX) { 
02CD:  CLRF   28
02CE:  CLRF   27
02CF:  MOVLW  70
02D0:  MOVWF  26
02D1:  MOVLW  83
02D2:  MOVWF  25
02D3:  MOVF   24,W
02D4:  MOVWF  2C
02D5:  MOVF   23,W
02D6:  MOVWF  2B
02D7:  MOVF   22,W
02D8:  MOVWF  2A
02D9:  MOVF   21,W
02DA:  MOVWF  29
02DB:  CALL   20F
02DC:  BTFSC  03.0
02DD:  GOTO   2E0
02DE:  BTFSS  03.2
02DF:  GOTO   2EC
....................          output_bit(COOLER, 1); 
02E0:  BSF    07.2
02E1:  BCF    20.2
02E2:  MOVF   20,W
02E3:  BSF    03.5
02E4:  MOVWF  07
....................          output_bit(RESISTOR, 0); 
02E5:  BCF    03.5
02E6:  BCF    07.1
02E7:  BCF    20.1
02E8:  MOVF   20,W
02E9:  BSF    03.5
02EA:  MOVWF  07
02EB:  BCF    03.5
....................       } 
....................           
....................       if(temp < TEMP_MIN) { 
02EC:  MOVF   24,W
02ED:  MOVWF  28
02EE:  MOVF   23,W
02EF:  MOVWF  27
02F0:  MOVF   22,W
02F1:  MOVWF  26
02F2:  MOVF   21,W
02F3:  MOVWF  25
02F4:  CLRF   2C
02F5:  CLRF   2B
02F6:  MOVLW  48
02F7:  MOVWF  2A
02F8:  MOVLW  83
02F9:  MOVWF  29
02FA:  CALL   20F
02FB:  BTFSS  03.0
02FC:  GOTO   309
....................          output_bit(COOLER, 0); 
02FD:  BCF    07.2
02FE:  BCF    20.2
02FF:  MOVF   20,W
0300:  BSF    03.5
0301:  MOVWF  07
....................          output_bit(RESISTOR, 1); 
0302:  BCF    03.5
0303:  BSF    07.1
0304:  BCF    20.1
0305:  MOVF   20,W
0306:  BSF    03.5
0307:  MOVWF  07
0308:  BCF    03.5
....................       } 
....................        
....................    } 
0309:  GOTO   275
....................  
.................... } 
....................  
.................... int16 leAd(int canal) { 
....................    set_adc_channel(canal); 
*
0018:  RLF    25,W
0019:  MOVWF  77
001A:  RLF    77,F
001B:  RLF    77,F
001C:  MOVLW  F8
001D:  ANDWF  77,F
001E:  MOVF   1F,W
001F:  ANDLW  C7
0020:  IORWF  77,W
0021:  MOVWF  1F
*
030A:  SLEEP
....................    delay_us(15); 
*
0022:  MOVLW  04
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  GOTO   027
....................    return read_adc(); 
0027:  BSF    1F.2
0028:  BTFSC  1F.2
0029:  GOTO   028
002A:  MOVF   1E,W
002B:  MOVWF  7A
002C:  BSF    03.5
002D:  MOVF   1E,W
002E:  MOVWF  78
002F:  MOVF   7A,W
0030:  MOVWF  79
.................... } 
0031:  BCF    03.5
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   278 (RETURN)

Configuration Fuses:
   Word  1: 1F71   XT NOWDT PUT PROTECT NODEBUG BROWNOUT NOLVP NOCPD NOWRT
