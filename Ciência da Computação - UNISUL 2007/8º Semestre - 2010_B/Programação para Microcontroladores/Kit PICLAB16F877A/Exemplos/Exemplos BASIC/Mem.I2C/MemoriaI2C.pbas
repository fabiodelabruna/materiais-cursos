'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*           Programação Em Pascal - Módulo B PIC16F877A       *
'*                             Exemplo 8                       *
'*                                                             *
'*             CENTRO DE TREINAMENTO - Cerne Tecnologia        *
'*                                                             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*   VERSÃO : 1.0
'*   DATA : 22/07/2005
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                         Descrição geral                     *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Este exemplo irá receber uma série de bytes da porta serial
'e quando preeencher toda uma tela do display, irá
'salvar este a partir de um buffer de 32 posições na
'memória I2C externa

program MemoriaI2C                     'Definição do programa

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*             Definição e inicialização das variáveis         *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir as variáveis globais do sistema

dim linha as byte
dim coluna as byte
dim contador as byte
dim controle as byte
dim recepcao as char
dim buffer as byte[32]

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                      Declaração de Labels                   *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir todos os labels utilizadas pelo sistema

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                      Constantes internas                    *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir as constantes utilizadas pelo sistema

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                Declaração dos flags de software             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir os flags utilizados no sistema

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração das saídas do software             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração das entradas do software           *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração de Rotinas e Interrupções          *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                  Rotina de Leitura no Barramento I2C        *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub function Le_I2C(dim endereco as byte) as byte

  dim aux as byte
  i2c_start           				'Condição de início
	i2c_wr(%10100000)		  		  'Envia um byte de escrita
	i2c_wr(endereco)				    'Envia endereço
	I2C_Repeated_Start					'Nova condição de início
	i2c_wr(%10100001)				    'Envia o byte de controle de leitura
	aux=i2c_rd(0)         		  'lê o dado armazenado na E²PROM e envia nack
	i2c_stop	                  'Condição de parada
  result=aux                  'retorna o dado lido

end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                 Rotina de Escrita no Barramento I2C         *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub procedure Escrever_I2C(dim endereco,dado as byte)

	i2c_start			             'Condição de início
	i2c_wr(%10100000) 	  	   'Envia o byte de e escrita
	i2c_wr(endereco)		   	   'Envia endereço
	i2c_wr(dado)	             'Escreve dado na E²PROM
	i2c_stop			       	     'Condição de parada
	delay_ms(5)				         'espera a gravação estar completa

end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*              Rotina para ler dados da memória serial        *
'*                    e apresenta-los no display               *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub procedure Recupera_Dados

    for contador = 0 to 15
      recepcao=le_i2c(contador)
      Lcd8_Chr(1,contador+1,recepcao)
    next contador

    for contador =16 to 31
      recepcao=le_i2c(contador)
      Lcd8_Chr(2,contador-15,recepcao)
    next contador

end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*            Rotina para salvar o buffer do display               *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub procedure Salva_Dados

    for contador=0 to 31
        escrever_i2c(contador,buffer[contador])
    next contador

end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Início do programa                    *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Nessa parte ficará o loop principal do sistema

Main:

   delay_ms(1000)               'tempo de start-up do display
   
   trisa=%11111111              'põe todos os pinos para entrada
   trise=0
   trisd=0
   adcon1=7                        'configura pinos de i/o
   I2C_init(100000)             'inicializa o módulo para funcionar a 100kHz em modo master
   option_reg=%10000000         'configura prescaler do timer 0


   LCD8_Config(PORTE, PORTD, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0)  'configura pinos de controle e dados
   LCD8_Init(PORTE,PORTD)                                      'inicializa o lcd

   Usart_Init(9600)             'Inicializa o módulo Usart para trabalhar a 9600bps

   Recupera_Dados               'Chama rotina para ler e mostrar os
                                'dados salvos na memória no display
   linha=1
   coluna=1
   controle=0

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Rotina Principal                      *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

     while 1 =1

         if usart_data_ready<>0 then
           recepcao=Usart_Read
           Usart_Write(recepcao)
           buffer[controle]=recepcao
           controle=controle+1        'salva dado no buffer
           Lcd8_Chr(linha,coluna,recepcao)
           coluna=coluna+1

           if coluna=17 then
                coluna=1

             if linha=1 then
                linha=2
             else
                linha=1
                Salva_Dados            'Chama rotina para salvar dados na I2C
                controle=0
             end if

           end if
           
         end if
         
     wend

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Fim do programa                       *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  end.
