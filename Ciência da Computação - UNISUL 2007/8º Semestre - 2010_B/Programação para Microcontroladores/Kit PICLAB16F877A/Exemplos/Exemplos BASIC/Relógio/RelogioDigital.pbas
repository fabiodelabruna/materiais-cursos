'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*           Programação Em Basic - Módulo B PIC16F877A        *
'*                             Exemplo 1                       *
'*                                                             *
'*             CENTRO DE TREINAMENTO - Cerne Tecnologia        *
'*                                                             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*   VERSÃO : 1.0
'*   DATA : 22/07/2005
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                         Descrição geral                     *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
' Implementar um relógio digital sem ajuste via teclado
' O horário será apresentado no display de 7 segmentos

program RelogioDigital       'Definição do programa

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*             Definição e inicialização das variáveis         *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir as variáveis globais do sistema

dim indice,pisca as byte
dim hora_msb,hora_lsb,minuto_msb,minuto_lsb as byte
dim vetor_display as byte[4]
dim vezes_tmr1 as byte

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                      Constantes internas                    *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir as constantes utilizadas pelo sistema

const CHR_0	= %00111111		' RETORNA CARACTERE 0
const CHR_1	=	%00000110		' RETORNA CARACTERE 1
const CHR_2	=	%01011011	  ' RETORNA CARACTERE 2
const CHR_3	=	%01001111		' RETORNA CARACTERE 3
const CHR_4	=	%01100110		' RETORNA CARACTERE 4
const CHR_5	=	%01101101		' RETORNA CARACTERE 5
const CHR_6	=	%01111101		' RETORNA CARACTERE 6
const CHR_7	=	%00000111		' RETORNA CARACTERE 7
const CHR_8	=	%01111111		' RETORNA CARACTERE 8
const CHR_9	=	%01101111		' RETORNA CARACTERE 9
const CHR_A	=	%01110111		' RETORNA CARACTERE A
const CHR_B	=	%01111100		' RETORNA CARACTERE B
const CHR_C	=	%00111001		' RETORNA CARACTERE C
const CHR_D	=	%01011110		' RETORNA CARACTERE D
const CHR_E	=	%01111001		' RETORNA CARACTERE E
const CHR_F	= %01110001		' RETORNA CARACTERE F

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                Declaração dos flags de software             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir os flags utilizados no sistema

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração de Rotinas e Interrupções          *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*         Rotina de Conversão Binário para 7 segmentos        *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub function Converte_to_7seg(dim dado as byte) as byte

 select case dado          'tabela de conversão para display de 7 segmentos
    case 0
         result=CHR_0
    case 1
         result=CHR_1
    case 2
         result=CHR_2
    case 3
         result=CHR_3
    case 4
         result=CHR_4
    case 5
         result=CHR_5
    case 6
         result=CHR_6
    case 7
         result=CHR_7
    case 8
         result=CHR_8
    case 9
         result=CHR_9
    case 10
         result=CHR_A
    case 11
         result=CHR_B
    case 12
         result=CHR_C
    case 13
         result=CHR_D
    case 14
         result=CHR_E
    case 15
         result=CHR_F
 end select

end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*              Rotina de Tratamento de Interrupção            *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub procedure interrupt

   if  testbit(intcon,t0if) = 1 then 'Tratamento da interrupção
       clearbit(intcon,t0if)         'de timer 0
       inc(indice)
       select case indice
              case 1
                   clearbit(portb,4)
                   portd=vetor_display[indice-1]
                   setbit(portb,1)
              case 2
                   clearbit(portb,1)
                   portd=vetor_display[indice-1]
                   if pisca=255 then
                      portd=portd or %10000000 'acende o ponto
                   end if
                   setbit(portb,2)
              case 3
                   clearbit(portb,2)
                   portd=vetor_display[indice-1]
                   setbit(portb,3)
              case 4
                   clearbit(portb,3)
                   portd=vetor_display[indice-1]
                   setbit(portb,4)
                   indice=0       'reinicia o indice
        end select
   end if
   
   if testbit(pir1,tmr1if) = 1 then
          tmr1h=$0B
          tmr1l=$DC
          clearbit(pir1,tmr1if)   'limpa flag de interrupção
          pisca=not pisca      'inverte o estado do pisca
          dec(vezes_tmr1)         'decrementa variável para dar 1 segundo
          if vezes_tmr1=0 then
             vezes_tmr1=120
                                                                                                                       inc(minuto_lsb)
             if minuto_lsb<>10 then
                 goto sai_int
             end if

             minuto_lsb=0
             inc(minuto_msb)
             if minuto_msb<>6 then
                  goto sai_int
             end if

             minuto_msb=0
             inc(hora_lsb)
             if hora_msb=2 then
               if hora_lsb=4 then
                 hora_msb=0
                 hora_lsb=0
                 goto sai_int
               end if
             end if
             
             if hora_lsb<>10 then
                goto sai_int
             end if

             hora_lsb=0
             inc(hora_msb)
          end if
   end if
sai_int:
end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Rotina Principal                      *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Nessa parte ficará o loop principal do sistema

Main:

   trisa=%00000000
   trisb=%00000000
   trisd=%00000000            'configura i/os
   option_reg=%10000000       'configura prescaler do timer 0
   indice=0                   'inicializa a variável de índice
   hora_msb=0
   hora_lsb=0
   minuto_msb=0
   minuto_lsb=0               'inicializa as variáveis de tempo
   pie1=%00000001             'habilita interrupção de timer 1
   t1con=%00110001            'configura timer 1 para prescaler de 1:8
   tmr1h=$0B
   tmr1l=$DC
   vezes_tmr1=120             'inicializa variável de contagem
   pisca=0                    'inicializa variável de piscagem
   intcon=%11100000           'configura interrupção de timer0
   
loop_principal:
     while true
       vetor_display[0]=Converte_to_7seg(hora_msb)
       vetor_display[1]=Converte_to_7seg(hora_lsb)
       vetor_display[2]=Converte_to_7seg(minuto_msb)
       vetor_display[3]=Converte_to_7seg(minuto_lsb)
      wend
     
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Fim do programa                       *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    end.