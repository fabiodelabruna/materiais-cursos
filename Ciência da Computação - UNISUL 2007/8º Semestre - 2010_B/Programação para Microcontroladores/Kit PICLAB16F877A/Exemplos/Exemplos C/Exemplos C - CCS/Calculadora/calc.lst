CCS PCM C Compiler, Version 3.245, 28193               11-fev-07 16:09

               Filename: C:\Cerne\CDs\kit PICLAB16f877A\Exemplos\Exemplos C\Calculadora\calc.lst

               ROM used: 924 words (11%)
                         Largest free fragment is 2048
               RAM used: 18 (10%) at main() level
                         30 (17%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   37E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   0CE
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *        	 Programação em C para o microcontrolador PIC16F877A           * 
....................  *                               Exemplo 7                                 * 
....................  *                                                                         * 
....................  *                CENTRO DE TREINAMENTO - Cerne Tecnologia	               * 
....................  *                                                                         * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *   VERSÃO : 1.0                                                          * 
....................  *   DATA : 16/05/2005                                                     * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                             Descrição geral                           * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
.................... // Receber via RS232 dois parâmetros e aplicar nestes as quatro 
.................... // operações básicas e retornando com o dado para o PC com a conta efetuada 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                		 	Definição de Cabeçalho						 * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... #include	<16F877A.h>				//microcontrolador utilizado 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A  
.................... #list 
....................  
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                         Configurações para gravação                   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... #fuses xt,nolvp,nowdt,nolvp,nobrownout,put,nodebug,noprotect,nowrt,nocpd 
....................          								  // Configurações da Máquina 
....................                                    // Oscilador: XT, LVP: Off, WDT: On, Brown-out: Off 
....................                                    // Power-up: Off, Debug: Off, CP: Off 
....................                                    // CPD: Off 
....................  
.................... #use delay(clock=4000000)          // Define o clock do sistema 
*
00DF:  MOVLW  38
00E0:  MOVWF  04
00E1:  MOVF   00,W
00E2:  BTFSC  03.2
00E3:  GOTO   0F3
00E4:  MOVLW  01
00E5:  MOVWF  78
00E6:  CLRF   77
00E7:  DECFSZ 77,F
00E8:  GOTO   0E7
00E9:  DECFSZ 78,F
00EA:  GOTO   0E6
00EB:  MOVLW  4A
00EC:  MOVWF  77
00ED:  DECFSZ 77,F
00EE:  GOTO   0ED
00EF:  NOP
00F0:  NOP
00F1:  DECFSZ 00,F
00F2:  GOTO   0E4
00F3:  RETLW  00
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7) 
....................          						        // Configura Usart 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                 Definição e inicialização das variáveis               * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
.................... //Aqui iremos definir as variáveis globais do sistema 
....................  
.................... long parametro1,parametro2; 
.................... int1 pode_converter; 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                                Saídas                               * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
.................... //Aqui iremos definir as saídas do sistema 
....................  
.................... #define  RS			  PIN_E2		// Pino de seleção de modo do display 
.................... #define  EN			  PIN_E1		// Pino de habilitação do display 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                       Prototipagem das funções                      * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
.................... //Aqui iremos declarar todas as funções definidas pelo usuário 
....................  
.................... void Inicializa(void);				// Prototipagem da procedure 
.................... void Tela_Inicial(void);			// Prototipagem da procedure 
.................... void Lcd_Inst(char dado);		  	// Prototipagem da procedure 
.................... void Lcd_Dado(char dado);			// Prototipagem da procedure 
.................... void Soma(void);	    				// Prototipagem da procedure 
.................... void Subtrai(void);					// Prototipagem da procedure 
.................... void Multiplica(void);				// Prototipagem da procedure 
.................... void Divide(void);					// Prototipagem da procedure 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                           Rotina Principal                		   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
.................... //Nessa parte ficará o loop principal do sistema 
....................  
.................... void main (void) 
.................... { 
*
037E:  CLRF   04
037F:  MOVLW  1F
0380:  ANDWF  03,F
0381:  MOVLW  19
0382:  BSF    03.5
0383:  MOVWF  19
0384:  MOVLW  26
0385:  MOVWF  18
0386:  MOVLW  90
0387:  BCF    03.5
0388:  MOVWF  18
0389:  BSF    03.5
038A:  BSF    1F.0
038B:  BSF    1F.1
038C:  BSF    1F.2
038D:  BCF    1F.3
038E:  MOVLW  07
038F:  MOVWF  1C
.................... 	Inicializa();				// Chama rotina para inicializar o sistema 
0390:  BCF    03.5
0391:  GOTO   132
....................  
.................... 	while(1)				     	// Entra em loop infinito 
.................... 		{ 
.................... 			restart_wdt(); 
0392:  CLRWDT
.................... 			if (pode_converter) 
0393:  BTFSS  2C.0
0394:  GOTO   39A
.................... 			{ 
.................... 				pode_converter=0; 
0395:  BCF    2C.0
.................... 				Soma(); 
0396:  GOTO   239
.................... 				Subtrai(); 
0397:  GOTO   271
.................... 				Multiplica(); 
0398:  GOTO   2DE
.................... 				Divide(); 
0399:  GOTO   342
.................... 			} 
.................... 		} 
039A:  GOTO   392
.................... } 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                       Inicialização do Sistema                 	   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Inicializa(void) 
.................... { 
039B:  SLEEP
....................  
....................    delay_ms(2000); 
*
0132:  MOVLW  08
0133:  MOVWF  2D
0134:  MOVLW  FA
0135:  MOVWF  38
0136:  CALL   0DF
0137:  DECFSZ 2D,F
0138:  GOTO   134
....................  
....................    setup_adc_ports(no_analogs);    // Todos os AD´s desligados 
0139:  BSF    03.5
013A:  BSF    1F.0
013B:  BSF    1F.1
013C:  BSF    1F.2
013D:  BCF    1F.3
....................    setup_wdt(WDT_2304MS);          // Configura WDT para 2,304 s 
013E:  MOVLW  0F
013F:  MOVWF  77
0140:  MOVLW  07
0141:  BCF    03.5
0142:  CLRF   01
0143:  MOVLW  81
0144:  MOVWF  04
0145:  MOVF   00,W
0146:  ANDLW  F0
0147:  IORLW  07
0148:  MOVWF  00
0149:  CLRWDT
014A:  MOVF   00,W
014B:  ANDLW  F7
014C:  BTFSC  77.3
014D:  ANDLW  F0
014E:  IORWF  77,W
014F:  MOVWF  00
....................    enable_interrupts(INT_RDA);     // Habilita interrupção de timer 0 
0150:  BSF    03.5
0151:  BSF    0C.5
....................    enable_interrupts(GLOBAL);      // Habilita todas as interrupções 
0152:  MOVLW  C0
0153:  BCF    03.5
0154:  IORWF  0B,F
....................  
....................    Lcd_Inst(0x30);			        // Inicializa o display 
0155:  MOVLW  30
0156:  MOVWF  2F
0157:  CALL   0F4
....................    delay_ms(3); 
0158:  MOVLW  03
0159:  MOVWF  38
015A:  CALL   0DF
....................    Lcd_Inst(0x30); 
015B:  MOVLW  30
015C:  MOVWF  2F
015D:  CALL   0F4
....................    Lcd_Inst(0x30); 
015E:  MOVLW  30
015F:  MOVWF  2F
0160:  CALL   0F4
....................    Lcd_Inst(0x38); 
0161:  MOVLW  38
0162:  MOVWF  2F
0163:  CALL   0F4
....................    Lcd_Inst(0x01); 
0164:  MOVLW  01
0165:  MOVWF  2F
0166:  CALL   0F4
....................    delay_ms(1); 
0167:  MOVLW  01
0168:  MOVWF  38
0169:  CALL   0DF
....................    Lcd_Inst(0x0C); 
016A:  MOVLW  0C
016B:  MOVWF  2F
016C:  CALL   0F4
....................    Lcd_Inst(0x06); 
016D:  MOVLW  06
016E:  MOVWF  2F
016F:  CALL   0F4
....................    Tela_Inicial(); 
.................... } 
*
018A:  BCF    0A.3
018B:  BCF    0A.4
018C:  GOTO   392 (RETURN)
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *               Rotina de Tratamento de Interrupção Serial			   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... #int_rda 
.................... void Isr_Serial(void) 
.................... { 
.................... 	parametro1=getc(); 
*
00CE:  BTFSS  0C.5
00CF:  GOTO   0CE
00D0:  MOVF   1A,W
00D1:  CLRF   29
00D2:  MOVWF  28
.................... 	while(!kbhit()); 
00D3:  BTFSS  0C.5
00D4:  GOTO   0D3
.................... 	parametro2=getc(); 
00D5:  BTFSS  0C.5
00D6:  GOTO   0D5
00D7:  MOVF   1A,W
00D8:  CLRF   2B
00D9:  MOVWF  2A
.................... 	pode_converter=1; 
00DA:  BSF    2C.0
.................... } 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *     		           Rotina para Somar dois valores				   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
00DB:  BCF    0C.5
00DC:  BCF    0A.3
00DD:  BCF    0A.4
00DE:  GOTO   01F
.................... void Soma(void) 
.................... { 
.................... 	long int soma; 
.................... 	soma=parametro1+parametro2; 
*
0239:  MOVF   2A,W
023A:  ADDWF  28,W
023B:  MOVWF  2D
023C:  MOVF   29,W
023D:  MOVWF  2E
023E:  BTFSC  03.0
023F:  INCF   2E,F
0240:  MOVF   2B,W
0241:  ADDWF  2E,F
.................... 	Lcd_Inst(0x82); 
0242:  MOVLW  82
0243:  MOVWF  2F
0244:  CALL   0F4
....................    printf(lcd_dado,"%4lu",soma); 
0245:  MOVLW  01
0246:  MOVWF  04
0247:  MOVF   2E,W
0248:  MOVWF  30
0249:  MOVF   2D,W
024A:  MOVWF  2F
024B:  CALL   18D
....................    printf("A soma e %4lu \n \r",soma); 
024C:  CLRF   2F
024D:  MOVF   2F,W
024E:  CALL   035
024F:  INCF   2F,F
0250:  MOVWF  77
0251:  MOVF   77,W
0252:  BTFSS  0C.4
0253:  GOTO   252
0254:  MOVWF  19
0255:  MOVLW  09
0256:  SUBWF  2F,W
0257:  BTFSS  03.2
0258:  GOTO   24D
0259:  MOVLW  01
025A:  MOVWF  04
025B:  MOVF   2E,W
025C:  MOVWF  31
025D:  MOVF   2D,W
025E:  MOVWF  30
025F:  CALL   1E5
0260:  MOVLW  0D
0261:  MOVWF  30
0262:  MOVF   30,W
0263:  CALL   035
0264:  INCF   30,F
0265:  MOVWF  77
0266:  MOVF   77,W
0267:  BTFSS  0C.4
0268:  GOTO   267
0269:  MOVWF  19
026A:  MOVLW  11
026B:  SUBWF  30,W
026C:  BTFSS  03.2
026D:  GOTO   262
.................... } 
026E:  BCF    0A.3
026F:  BCF    0A.4
0270:  GOTO   397 (RETURN)
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *     		           Rotina para Subtrair dois valores			   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Subtrai(void) 
.................... { 
.................... 	long int subtrai; 
.................... 	if (parametro2>parametro1) 
0271:  MOVF   29,W
0272:  SUBWF  2B,W
0273:  BTFSS  03.0
0274:  GOTO   28F
0275:  BTFSS  03.2
0276:  GOTO   27B
0277:  MOVF   2A,W
0278:  SUBWF  28,W
0279:  BTFSC  03.0
027A:  GOTO   28F
.................... 		{puts("000"); 
027B:  CLRF   2F
027C:  MOVF   2F,W
027D:  CALL   04B
027E:  IORLW  00
027F:  BTFSC  03.2
0280:  GOTO   286
0281:  INCF   2F,F
0282:  BTFSS  0C.4
0283:  GOTO   282
0284:  MOVWF  19
0285:  GOTO   27C
0286:  MOVLW  0D
0287:  BTFSS  0C.4
0288:  GOTO   287
0289:  MOVWF  19
028A:  MOVLW  0A
028B:  BTFSS  0C.4
028C:  GOTO   28B
028D:  MOVWF  19
....................        return;} 
028E:  GOTO   2C4
....................         
.................... 	subtrai=parametro1-parametro2; 
028F:  MOVF   2A,W
0290:  SUBWF  28,W
0291:  MOVWF  2D
0292:  MOVF   29,W
0293:  MOVWF  2E
0294:  MOVF   2B,W
0295:  BTFSS  03.0
0296:  INCFSZ 2B,W
0297:  SUBWF  2E,F
.................... 	Lcd_Inst(0x8B); 
0298:  MOVLW  8B
0299:  MOVWF  2F
029A:  CALL   0F4
....................    printf(lcd_dado,"%4lu",subtrai); 
029B:  MOVLW  01
029C:  MOVWF  04
029D:  MOVF   2E,W
029E:  MOVWF  30
029F:  MOVF   2D,W
02A0:  MOVWF  2F
02A1:  CALL   18D
....................    printf("A subtracao e %4lu \n \r",subtrai);    
02A2:  CLRF   2F
02A3:  MOVF   2F,W
02A4:  CALL   053
02A5:  INCF   2F,F
02A6:  MOVWF  77
02A7:  MOVF   77,W
02A8:  BTFSS  0C.4
02A9:  GOTO   2A8
02AA:  MOVWF  19
02AB:  MOVLW  0E
02AC:  SUBWF  2F,W
02AD:  BTFSS  03.2
02AE:  GOTO   2A3
02AF:  MOVLW  01
02B0:  MOVWF  04
02B1:  MOVF   2E,W
02B2:  MOVWF  31
02B3:  MOVF   2D,W
02B4:  MOVWF  30
02B5:  CALL   1E5
02B6:  MOVLW  12
02B7:  MOVWF  30
02B8:  MOVF   30,W
02B9:  CALL   053
02BA:  INCF   30,F
02BB:  MOVWF  77
02BC:  MOVF   77,W
02BD:  BTFSS  0C.4
02BE:  GOTO   2BD
02BF:  MOVWF  19
02C0:  MOVLW  16
02C1:  SUBWF  30,W
02C2:  BTFSS  03.2
02C3:  GOTO   2B8
.................... } 
02C4:  BCF    0A.3
02C5:  BCF    0A.4
02C6:  GOTO   398 (RETURN)
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *  	              Rotina para Multiplicar dois valores			   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Multiplica(void) 
.................... { 
.................... 	long int multiplica; 
.................... 	multiplica=parametro1*parametro2; 
*
02DE:  MOVF   29,W
02DF:  MOVWF  30
02E0:  MOVF   28,W
02E1:  MOVWF  2F
02E2:  MOVF   2B,W
02E3:  MOVWF  32
02E4:  MOVF   2A,W
02E5:  MOVWF  31
02E6:  GOTO   2C7
02E7:  MOVF   79,W
02E8:  MOVWF  2E
02E9:  MOVF   78,W
02EA:  MOVWF  2D
....................  
....................    Lcd_Inst(0xC2); 
02EB:  MOVLW  C2
02EC:  MOVWF  2F
02ED:  CALL   0F4
....................    printf(lcd_dado,"%5lu",multiplica); 
02EE:  MOVLW  00
02EF:  MOVWF  04
02F0:  MOVF   2E,W
02F1:  MOVWF  30
02F2:  MOVF   2D,W
02F3:  MOVWF  2F
02F4:  CALL   18D
....................    printf("A multiplicacao e %5lu \n \r",multiplica); 
02F5:  CLRF   2F
02F6:  MOVF   2F,W
02F7:  CALL   06E
02F8:  INCF   2F,F
02F9:  MOVWF  77
02FA:  MOVF   77,W
02FB:  BTFSS  0C.4
02FC:  GOTO   2FB
02FD:  MOVWF  19
02FE:  MOVLW  12
02FF:  SUBWF  2F,W
0300:  BTFSS  03.2
0301:  GOTO   2F6
0302:  MOVLW  00
0303:  MOVWF  04
0304:  MOVF   2E,W
0305:  MOVWF  31
0306:  MOVF   2D,W
0307:  MOVWF  30
0308:  CALL   1E5
0309:  MOVLW  16
030A:  MOVWF  30
030B:  MOVF   30,W
030C:  CALL   06E
030D:  INCF   30,F
030E:  MOVWF  77
030F:  MOVF   77,W
0310:  BTFSS  0C.4
0311:  GOTO   310
0312:  MOVWF  19
0313:  MOVLW  1A
0314:  SUBWF  30,W
0315:  BTFSS  03.2
0316:  GOTO   30B
....................  
.................... } 
0317:  BCF    0A.3
0318:  BCF    0A.4
0319:  GOTO   399 (RETURN)
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *     		           Rotina para Dividir dois valores				   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Divide(void) 
.................... { 
.................... 	long int divide; 
.................... 	divide=parametro1/parametro2; 
*
0342:  MOVF   29,W
0343:  MOVWF  30
0344:  MOVF   28,W
0345:  MOVWF  2F
0346:  MOVF   2B,W
0347:  MOVWF  32
0348:  MOVF   2A,W
0349:  MOVWF  31
034A:  GOTO   31A
034B:  MOVF   79,W
034C:  MOVWF  2E
034D:  MOVF   78,W
034E:  MOVWF  2D
....................    Lcd_Inst(0xCB); 
034F:  MOVLW  CB
0350:  MOVWF  2F
0351:  CALL   0F4
....................    printf(lcd_dado,"%3lu",divide); 
0352:  MOVLW  02
0353:  MOVWF  04
0354:  MOVF   2E,W
0355:  MOVWF  30
0356:  MOVF   2D,W
0357:  MOVWF  2F
0358:  CALL   18D
....................    printf("A divisao e %3lu \n \r",divide); 
0359:  CLRF   2F
035A:  MOVF   2F,W
035B:  CALL   08D
035C:  INCF   2F,F
035D:  MOVWF  77
035E:  MOVF   77,W
035F:  BTFSS  0C.4
0360:  GOTO   35F
0361:  MOVWF  19
0362:  MOVLW  0C
0363:  SUBWF  2F,W
0364:  BTFSS  03.2
0365:  GOTO   35A
0366:  MOVLW  02
0367:  MOVWF  04
0368:  MOVF   2E,W
0369:  MOVWF  31
036A:  MOVF   2D,W
036B:  MOVWF  30
036C:  CALL   1E5
036D:  MOVLW  10
036E:  MOVWF  30
036F:  MOVF   30,W
0370:  CALL   08D
0371:  INCF   30,F
0372:  MOVWF  77
0373:  MOVF   77,W
0374:  BTFSS  0C.4
0375:  GOTO   374
0376:  MOVWF  19
0377:  MOVLW  14
0378:  SUBWF  30,W
0379:  BTFSS  03.2
037A:  GOTO   36F
.................... } 
037B:  BCF    0A.3
037C:  BCF    0A.4
037D:  GOTO   39A (RETURN)
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *              Rotina para Apresentar a tela Inicial do Sistema       * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Tela_Inicial(void) 
.................... { 
.................... 	Lcd_Inst(0x80);			     // Atualiza a tela do LCD 
*
0170:  MOVLW  80
0171:  MOVWF  2F
0172:  CALL   0F4
....................    printf(lcd_dado,"+:0000   -:000 "); 
0173:  CLRF   2D
0174:  MOVF   2D,W
0175:  CALL   0A6
0176:  IORLW  00
0177:  BTFSC  03.2
0178:  GOTO   17D
0179:  INCF   2D,F
017A:  MOVWF  37
017B:  CALL   113
017C:  GOTO   174
.................... 	Lcd_Inst(0xC0);			     // Atualiza a tela do LCD 
017D:  MOVLW  C0
017E:  MOVWF  2F
017F:  CALL   0F4
....................    printf(lcd_dado,"*:00000  /:000 "); 
0180:  CLRF   2D
0181:  MOVF   2D,W
0182:  CALL   0BA
0183:  IORLW  00
0184:  BTFSC  03.2
0185:  GOTO   18A
0186:  INCF   2D,F
0187:  MOVWF  37
0188:  CALL   113
0189:  GOTO   181
.................... } 
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                Rotina de Envio de Instrução para o LCD			   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Lcd_Inst(char dado) 
.................... { 
.................... 	disable_interrupts(GLOBAL);	// Desliga as interrupções 
*
00F4:  BCF    0B.6
00F5:  BCF    0B.7
00F6:  BTFSC  0B.7
00F7:  GOTO   0F5
.................... 	output_low(RS);					// Põe pino de RS em baixo, modo comando 
00F8:  BSF    03.5
00F9:  BCF    09.2
00FA:  BCF    03.5
00FB:  BCF    09.2
.................... 	output_d(dado);					// Põe o dado no portd 
00FC:  BSF    03.5
00FD:  CLRF   08
00FE:  BCF    03.5
00FF:  MOVF   2F,W
0100:  MOVWF  08
.................... 	delay_cycles(2);		     		// Aguarda 2 us, acomodação 
0101:  NOP
0102:  NOP
.................... 	output_high(EN);	   			// Gera pulso de clock 
0103:  BSF    03.5
0104:  BCF    09.1
0105:  BCF    03.5
0106:  BSF    09.1
.................... 	delay_cycles(2); 
0107:  NOP
0108:  NOP
.................... 	output_low(EN); 
0109:  BSF    03.5
010A:  BCF    09.1
010B:  BCF    03.5
010C:  BCF    09.1
.................... 	delay_ms(1);		   			// Aguarda 1ms 
010D:  MOVLW  01
010E:  MOVWF  38
010F:  CALL   0DF
.................... 	enable_interrupts(GLOBAL);		// Liga as interrupções 
0110:  MOVLW  C0
0111:  IORWF  0B,F
.................... } 
0112:  RETLW  00
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *                  Rotina de Envio de Dados para o LCD			       * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
....................  
.................... void Lcd_Dado(char dado) 
.................... { 
.................... 	disable_interrupts(GLOBAL);	// Desliga as interrupções 
0113:  BCF    0B.6
0114:  BCF    0B.7
0115:  BTFSC  0B.7
0116:  GOTO   114
.................... 	output_high(RS);		     		// Seta o pino RS, modo dado 
0117:  BSF    03.5
0118:  BCF    09.2
0119:  BCF    03.5
011A:  BSF    09.2
.................... 	output_d(dado);					// Põe o dado no portd 
011B:  BSF    03.5
011C:  CLRF   08
011D:  BCF    03.5
011E:  MOVF   37,W
011F:  MOVWF  08
.................... 	delay_cycles(2);	   			// Aguarda 2us, acomodação 
0120:  NOP
0121:  NOP
.................... 	output_high(EN);    				// Gera pulso de clock 
0122:  BSF    03.5
0123:  BCF    09.1
0124:  BCF    03.5
0125:  BSF    09.1
.................... 	delay_cycles(2); 
0126:  NOP
0127:  NOP
.................... 	output_low(EN); 
0128:  BSF    03.5
0129:  BCF    09.1
012A:  BCF    03.5
012B:  BCF    09.1
.................... 	delay_ms(1);				    	// Aguarda 1ms 
012C:  MOVLW  01
012D:  MOVWF  38
012E:  CALL   0DF
.................... 	enable_interrupts(GLOBAL);		// Liga as interrupções 
012F:  MOVLW  C0
0130:  IORWF  0B,F
.................... } 
0131:  RETLW  00
....................  
.................... /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
....................  *      	                  Fim do Programa						   * 
....................  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
