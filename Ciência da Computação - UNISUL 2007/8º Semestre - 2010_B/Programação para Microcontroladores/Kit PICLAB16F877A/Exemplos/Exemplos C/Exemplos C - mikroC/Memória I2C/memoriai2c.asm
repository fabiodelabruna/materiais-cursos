;  ASM code generated by mikroVirtualMachine for PIC - V. 6.2.1.0
;  Date/Time: 29/7/2007 15:15:27
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$29FD			GOTO	_main
$0004	$	_I2C_Is_Idle:
$0004	$3000			MOVLW	0
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$1914			BTFSC	SSPSTAT, 2
$0008	$3001			MOVLW	1
$0009	$00F1			MOVWF	STACK_1
$000A	$0871			MOVF	STACK_1, 0
$000B	$3A00			XORLW	0
$000C	$1D03			BTFSS	STATUS, Z
$000D	$2818			GOTO	L_I2C_Is_Idle_0
$000E	$301F			MOVLW	31
$000F	$0511			ANDWF	SSPCON2, 0
$0010	$00F1			MOVWF	STACK_1
$0011	$0871			MOVF	STACK_1, 0
$0012	$3A00			XORLW	0
$0013	$1D03			BTFSS	STATUS, Z
$0014	$2818			GOTO	L_I2C_Is_Idle_1
$0015	$3001			MOVLW	1
$0016	$00F0			MOVWF	STACK_0
$0017	$0008			RETURN
$0018	$	L_I2C_Is_Idle_1:
$0018	$	L_I2C_Is_Idle_0:
$0018	$01F0			CLRF	STACK_0, 1
$0019	$0008			RETURN
$001A	$	_Delay_1us:
;delays.c,2 :: 		void Delay_1us() {
;delays.c,3 :: 		Delay_us(1);
$001A	$0000			NOP
;delays.c,4 :: 		}
$001B	$0008			RETURN
$001C	$	_Delay_5500us:
;delays.c,26 :: 		void Delay_5500us() {
;delays.c,27 :: 		Delay_us(5500);
$001C	$3008			MOVLW	8
$001D	$1303			BCF	STATUS, RP1
$001E	$1283			BCF	STATUS, RP0
$001F	$00FB			MOVWF	STACK_11
$0020	$30FF			MOVLW	255
$0021	$00FA			MOVWF	STACK_10
$0022	$0BFB			DECFSZ	STACK_11, F
$0023	$2825			GOTO	$+2
$0024	$2828			GOTO	$+4
$0025	$0BFA			DECFSZ	STACK_10, F
$0026	$2825			GOTO	$-1
$0027	$2822			GOTO	$-5
$0028	$301E			MOVLW	30
$0029	$00FA			MOVWF	STACK_10
$002A	$0BFA			DECFSZ	STACK_10, F
$002B	$282A			GOTO	$-1
;delays.c,28 :: 		}
$002C	$0008			RETURN
$002D	$	_Delay_50us:
;delays.c,14 :: 		void Delay_50us() {
;delays.c,15 :: 		Delay_us(50);
$002D	$3010			MOVLW	16
$002E	$1303			BCF	STATUS, RP1
$002F	$1283			BCF	STATUS, RP0
$0030	$00FA			MOVWF	STACK_10
$0031	$0BFA			DECFSZ	STACK_10, F
$0032	$2831			GOTO	$-1
$0033	$0000			NOP
;delays.c,16 :: 		}
$0034	$0008			RETURN
$0035	$	_I2C_Start:
$0035	$1303			BCF	STATUS, RP1
$0036	$1283			BCF	STATUS, RP0
$0037	$01D0			CLRF	I2C_Start_j_L0
$0038	$01D1			CLRF	I2C_Start_j_L0+1
$0039	$	L_I2C_Start_2:
$0039	$0851			MOVF	I2C_Start_j_L0+1, 0
$003A	$3C12			SUBLW	18
$003B	$1D03			BTFSS	STATUS, Z
$003C	$283F			GOTO	L_I2C_Start_19
$003D	$0850			MOVF	I2C_Start_j_L0, 0
$003E	$3C8E			SUBLW	142
$003F	$	L_I2C_Start_19:
$003F	$1C03			BTFSS	STATUS, C
$0040	$284A			GOTO	L_I2C_Start_3
$0041	$2004			CALL	_I2C_Is_Idle
$0042	$0870			MOVF	STACK_0, 0
$0043	$1D03			BTFSS	STATUS, Z
$0044	$284A			GOTO	L_I2C_Start_3
$0045	$	L_I2C_Start_5:
$0045	$	L_I2C_Start_4:
$0045	$1283			BCF	STATUS, RP0
$0046	$0AD0			INCF	I2C_Start_j_L0, 1
$0047	$1903			BTFSC	STATUS, Z
$0048	$0AD1			INCF	I2C_Start_j_L0+1, 1
$0049	$2839			GOTO	L_I2C_Start_2
$004A	$	L_I2C_Start_3:
$004A	$1303			BCF	STATUS, RP1
$004B	$1283			BCF	STATUS, RP0
$004C	$3012			MOVLW	18
$004D	$0251			SUBWF	I2C_Start_j_L0+1, 0
$004E	$1D03			BTFSS	STATUS, Z
$004F	$2852			GOTO	L_I2C_Start_20
$0050	$308F			MOVLW	143
$0051	$0250			SUBWF	I2C_Start_j_L0, 0
$0052	$	L_I2C_Start_20:
$0052	$1C03			BTFSS	STATUS, C
$0053	$2857			GOTO	L_I2C_Start_6
$0054	$307B			MOVLW	123
$0055	$00F0			MOVWF	STACK_0
$0056	$0008			RETURN
$0057	$	L_I2C_Start_6:
$0057	$1683			BSF	STATUS, RP0
$0058	$1411			BSF	SSPCON2, 0
$0059	$	L_I2C_Start_8:
$0059	$1C11			BTFSS	SSPCON2, 0
$005A	$285D			GOTO	L_I2C_Start_9
$005B	$0000			NOP
$005C	$2859			GOTO	L_I2C_Start_8
$005D	$	L_I2C_Start_9:
$005D	$01F0			CLRF	STACK_0, 1
$005E	$0008			RETURN
$005F	$	_I2C_Wr:
$005F	$1303			BCF	STATUS, RP1
$0060	$1283			BCF	STATUS, RP0
$0061	$0850			MOVF	FARG_I2C_Wr+0, 0
$0062	$0093			MOVWF	SSPBUF
$0063	$	L_I2C_Wr_15:
$0063	$1683			BSF	STATUS, RP0
$0064	$1D14			BTFSS	SSPSTAT, 2
$0065	$2868			GOTO	L_I2C_Wr_16
$0066	$0000			NOP
$0067	$2863			GOTO	L_I2C_Wr_15
$0068	$	L_I2C_Wr_16:
$0068	$3000			MOVLW	0
$0069	$1B11			BTFSC	SSPCON2, 6
$006A	$3001			MOVLW	1
$006B	$00F1			MOVWF	STACK_1
$006C	$0871			MOVF	STACK_1, 0
$006D	$3A00			XORLW	0
$006E	$1D03			BTFSS	STATUS, Z
$006F	$2872			GOTO	L_I2C_Wr_17
$0070	$01F0			CLRF	STACK_0, 1
$0071	$0008			RETURN
$0072	$	L_I2C_Wr_17:
$0072	$1511			BSF	SSPCON2, 2
$0073	$3002			MOVLW	2
$0074	$00F0			MOVWF	STACK_0
$0075	$0008			RETURN
$0076	$	_I2C_Repeated_Start:
$0076	$1303			BCF	STATUS, RP1
$0077	$1683			BSF	STATUS, RP0
$0078	$1491			BSF	SSPCON2, 1
$0079	$	L_I2C_Repeated_Start_10:
$0079	$1C91			BTFSS	SSPCON2, 1
$007A	$287D			GOTO	L_I2C_Repeated_Start_11
$007B	$0000			NOP
$007C	$2879			GOTO	L_I2C_Repeated_Start_10
$007D	$	L_I2C_Repeated_Start_11:
$007D	$0008			RETURN
$007E	$	_I2C_Rd:
$007E	$1303			BCF	STATUS, RP1
$007F	$1683			BSF	STATUS, RP0
$0080	$1591			BSF	SSPCON2, 3
$0081	$	L_I2C_Rd_12:
$0081	$1D91			BTFSS	SSPCON2, 3
$0082	$2885			GOTO	L_I2C_Rd_13
$0083	$0000			NOP
$0084	$2881			GOTO	L_I2C_Rd_12
$0085	$	L_I2C_Rd_13:
$0085	$1283			BCF	STATUS, RP0
$0086	$0813			MOVF	SSPBUF, 0
$0087	$00D1			MOVWF	I2C_Rd_tmp_L0
$0088	$1683			BSF	STATUS, RP0
$0089	$1291			BCF	SSPCON2, 5
$008A	$1283			BCF	STATUS, RP0
$008B	$0850			MOVF	FARG_I2C_Rd+0, 0
$008C	$3A00			XORLW	0
$008D	$1D03			BTFSS	STATUS, Z
$008E	$2891			GOTO	L_I2C_Rd_14
$008F	$1683			BSF	STATUS, RP0
$0090	$1691			BSF	SSPCON2, 5
$0091	$	L_I2C_Rd_14:
$0091	$1303			BCF	STATUS, RP1
$0092	$1683			BSF	STATUS, RP0
$0093	$1611			BSF	SSPCON2, 4
$0094	$1283			BCF	STATUS, RP0
$0095	$0851			MOVF	I2C_Rd_tmp_L0, 0
$0096	$00F0			MOVWF	STACK_0
$0097	$0008			RETURN
$0098	$	_I2C_Stop:
$0098	$1303			BCF	STATUS, RP1
$0099	$1683			BSF	STATUS, RP0
$009A	$1511			BSF	SSPCON2, 2
$009B	$0008			RETURN
$009C	$	_Lcd8_Cmd:
$009C	$1303			BCF	STATUS, RP1
$009D	$1283			BCF	STATUS, RP0
$009E	$0820			MOVF	lcd8bit_DataAddress, 0
$009F	$0084			MOVWF	FSR
$00A0	$0180			CLRF	INDF, 1
$00A1	$0850			MOVF	FARG_Lcd8_Cmd+0, 0
$00A2	$1903			BTFSC	STATUS, Z
$00A3	$28A4			GOTO	L_Lcd8_Cmd_0
$00A4	$	L_Lcd8_Cmd_0:
$00A4	$1BD0			BTFSC	FARG_Lcd8_Cmd+0, 7
$00A5	$1780			BSF	INDF, __LCD8_DB7
$00A6	$1B50			BTFSC	FARG_Lcd8_Cmd+0, 6
$00A7	$1700			BSF	INDF, __LCD8_DB6
$00A8	$1AD0			BTFSC	FARG_Lcd8_Cmd+0, 5
$00A9	$1680			BSF	INDF, __LCD8_DB5
$00AA	$1A50			BTFSC	FARG_Lcd8_Cmd+0, 4
$00AB	$1600			BSF	INDF, __LCD8_DB4
$00AC	$19D0			BTFSC	FARG_Lcd8_Cmd+0, 3
$00AD	$1580			BSF	INDF, __LCD8_DB3
$00AE	$1950			BTFSC	FARG_Lcd8_Cmd+0, 2
$00AF	$1500			BSF	INDF, __LCD8_DB2
$00B0	$18D0			BTFSC	FARG_Lcd8_Cmd+0, 1
$00B1	$1480			BSF	INDF, __LCD8_DB1
$00B2	$1850			BTFSC	FARG_Lcd8_Cmd+0, 0
$00B3	$1400			BSF	INDF, __LCD8_DB0
$00B4	$0821			MOVF	lcd8bit_CtrlAddress, 0
$00B5	$0084			MOVWF	FSR
$00B6	$1500			BSF	INDF, __LCD8_RS
$00B7	$0822			MOVF	_com, 0
$00B8	$1903			BTFSC	STATUS, Z
$00B9	$28BB			GOTO	L_Lcd8_Cmd_1
$00BA	$1100			BCF	INDF, __LCD8_RS
$00BB	$	L_Lcd8_Cmd_1:
$00BB	$1480			BSF	INDF, __LCD8_ENABLE
$00BC	$201A			CALL	_Delay_1us
$00BD	$1080			BCF	INDF, __LCD8_ENABLE
$00BE	$0822			MOVF	_com, 0
$00BF	$1903			BTFSC	STATUS, Z
$00C0	$28C3			GOTO	L_Lcd8_Cmd_2
$00C1	$201C			CALL	_Delay_5500us
$00C2	$28C4			GOTO	L_Lcd8_Cmd_3
$00C3	$	L_Lcd8_Cmd_2:
$00C3	$202D			CALL	_Delay_50us
$00C4	$	L_Lcd8_Cmd_3:
$00C4	$0008			RETURN
$00C5	$	_Le_I2C:
;memoriai2c.c,33 :: 		char Le_I2C(char endereco)
;memoriai2c.c,36 :: 		i2c_start();           	      //Condição de início
$00C5	$2035			CALL	_I2C_Start
;memoriai2c.c,37 :: 		i2c_wr(0b10100000);	      //Envia um byte de escrita
$00C6	$30A0			MOVLW	160
$00C7	$1303			BCF	STATUS, RP1
$00C8	$1283			BCF	STATUS, RP0
$00C9	$00D0			MOVWF	FARG_I2C_Wr+0
$00CA	$205F			CALL	_I2C_Wr
;memoriai2c.c,38 :: 		i2c_wr(endereco);		      //Envia endereço
$00CB	$1283			BCF	STATUS, RP0
$00CC	$084D			MOVF	FARG_Le_I2C+0, 0
$00CD	$00D0			MOVWF	FARG_I2C_Wr+0
$00CE	$205F			CALL	_I2C_Wr
;memoriai2c.c,39 :: 		I2C_Repeated_Start();	      //Nova condição de início
$00CF	$2076			CALL	_I2C_Repeated_Start
;memoriai2c.c,40 :: 		i2c_wr(0b10100001);	      //Envia o byte de controle de leitura
$00D0	$30A1			MOVLW	161
$00D1	$1283			BCF	STATUS, RP0
$00D2	$00D0			MOVWF	FARG_I2C_Wr+0
$00D3	$205F			CALL	_I2C_Wr
;memoriai2c.c,41 :: 		aux=i2c_rd(0);         	      //lê o dado armazenado na E²PROM e envia nack
$00D4	$1283			BCF	STATUS, RP0
$00D5	$01D0			CLRF	FARG_I2C_Rd+0, 1
$00D6	$207E			CALL	_I2C_Rd
$00D7	$0870			MOVF	STACK_0, 0
$00D8	$00CE			MOVWF	Le_I2C_aux_L0
;memoriai2c.c,42 :: 		i2c_stop();                      //Condição de parada
$00D9	$2098			CALL	_I2C_Stop
;memoriai2c.c,43 :: 		return(aux);              	      //retorna o dado lido
$00DA	$1283			BCF	STATUS, RP0
$00DB	$084E			MOVF	Le_I2C_aux_L0, 0
$00DC	$00F0			MOVWF	STACK_0
;memoriai2c.c,44 :: 		}
$00DD	$0008			RETURN
$00DE	$	_Lcd8_Chr:
$00DE	$28F8			GOTO	L_Lcd8_Chr_4
$00DF	$	L_Lcd8_Chr_6:
$00DF	$3080			MOVLW	128
$00E0	$1303			BCF	STATUS, RP1
$00E1	$1283			BCF	STATUS, RP0
$00E2	$00CD			MOVWF	FARG_Lcd8_Chr+0
$00E3	$290D			GOTO	L_Lcd8_Chr_5
$00E4	$	L_Lcd8_Chr_7:
$00E4	$30C0			MOVLW	192
$00E5	$1303			BCF	STATUS, RP1
$00E6	$1283			BCF	STATUS, RP0
$00E7	$00CD			MOVWF	FARG_Lcd8_Chr+0
$00E8	$290D			GOTO	L_Lcd8_Chr_5
$00E9	$	L_Lcd8_Chr_8:
$00E9	$3094			MOVLW	148
$00EA	$1303			BCF	STATUS, RP1
$00EB	$1283			BCF	STATUS, RP0
$00EC	$00CD			MOVWF	FARG_Lcd8_Chr+0
$00ED	$290D			GOTO	L_Lcd8_Chr_5
$00EE	$	L_Lcd8_Chr_9:
$00EE	$30D4			MOVLW	212
$00EF	$1303			BCF	STATUS, RP1
$00F0	$1283			BCF	STATUS, RP0
$00F1	$00CD			MOVWF	FARG_Lcd8_Chr+0
$00F2	$290D			GOTO	L_Lcd8_Chr_5
$00F3	$	L_Lcd8_Chr_10:
$00F3	$3080			MOVLW	128
$00F4	$1303			BCF	STATUS, RP1
$00F5	$1283			BCF	STATUS, RP0
$00F6	$00CD			MOVWF	FARG_Lcd8_Chr+0
$00F7	$290D			GOTO	L_Lcd8_Chr_5
$00F8	$	L_Lcd8_Chr_4:
$00F8	$1303			BCF	STATUS, RP1
$00F9	$1283			BCF	STATUS, RP0
$00FA	$1303			BCF	STATUS, RP1
$00FB	$1283			BCF	STATUS, RP0
$00FC	$084D			MOVF	FARG_Lcd8_Chr+0, 0
$00FD	$3A01			XORLW	1
$00FE	$1903			BTFSC	STATUS, Z
$00FF	$28DF			GOTO	L_Lcd8_Chr_6
$0100	$084D			MOVF	FARG_Lcd8_Chr+0, 0
$0101	$3A02			XORLW	2
$0102	$1903			BTFSC	STATUS, Z
$0103	$28E4			GOTO	L_Lcd8_Chr_7
$0104	$084D			MOVF	FARG_Lcd8_Chr+0, 0
$0105	$3A03			XORLW	3
$0106	$1903			BTFSC	STATUS, Z
$0107	$28E9			GOTO	L_Lcd8_Chr_8
$0108	$084D			MOVF	FARG_Lcd8_Chr+0, 0
$0109	$3A04			XORLW	4
$010A	$1903			BTFSC	STATUS, Z
$010B	$28EE			GOTO	L_Lcd8_Chr_9
$010C	$28F3			GOTO	L_Lcd8_Chr_10
$010D	$	L_Lcd8_Chr_5:
$010D	$1303			BCF	STATUS, RP1
$010E	$1283			BCF	STATUS, RP0
$010F	$034E			DECF	FARG_Lcd8_Chr+1, 0
$0110	$00F0			MOVWF	STACK_0
$0111	$084D			MOVF	FARG_Lcd8_Chr+0, 0
$0112	$07F0			ADDWF	STACK_0, 1
$0113	$0870			MOVF	STACK_0, 0
$0114	$00CD			MOVWF	FARG_Lcd8_Chr+0
$0115	$0870			MOVF	STACK_0, 0
$0116	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$0117	$209C			CALL	_Lcd8_Cmd
$0118	$01A2			CLRF	_com, 1
$0119	$084F			MOVF	FARG_Lcd8_Chr+2, 0
$011A	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$011B	$209C			CALL	_Lcd8_Cmd
$011C	$3001			MOVLW	1
$011D	$00A2			MOVWF	_com
$011E	$0008			RETURN
$011F	$	_Escrever_I2C:
;memoriai2c.c,50 :: 		void Escrever_I2C(char endereco, char dado)
;memoriai2c.c,52 :: 		i2c_start();		      //Condição de início
$011F	$2035			CALL	_I2C_Start
;memoriai2c.c,53 :: 		i2c_wr(0b10100000); 	      //Envia o byte de e escrita
$0120	$30A0			MOVLW	160
$0121	$1303			BCF	STATUS, RP1
$0122	$1283			BCF	STATUS, RP0
$0123	$00D0			MOVWF	FARG_I2C_Wr+0
$0124	$205F			CALL	_I2C_Wr
;memoriai2c.c,54 :: 		i2c_wr(endereco);		      //Envia endereço
$0125	$1283			BCF	STATUS, RP0
$0126	$084D			MOVF	FARG_Escrever_I2C+0, 0
$0127	$00D0			MOVWF	FARG_I2C_Wr+0
$0128	$205F			CALL	_I2C_Wr
;memoriai2c.c,55 :: 		i2c_wr(dado);	              //Escreve dado na E²PROM
$0129	$1283			BCF	STATUS, RP0
$012A	$084E			MOVF	FARG_Escrever_I2C+1, 0
$012B	$00D0			MOVWF	FARG_I2C_Wr+0
$012C	$205F			CALL	_I2C_Wr
;memoriai2c.c,56 :: 		i2c_stop();		      // Condição de parada
$012D	$2098			CALL	_I2C_Stop
;memoriai2c.c,57 :: 		delay_ms(5);		      // espera a gravação estar completa
$012E	$3007			MOVLW	7
$012F	$00FB			MOVWF	STACK_11
$0130	$30FF			MOVLW	255
$0131	$00FA			MOVWF	STACK_10
$0132	$0BFB			DECFSZ	STACK_11, F
$0133	$2935			GOTO	$+2
$0134	$2938			GOTO	$+4
$0135	$0BFA			DECFSZ	STACK_10, F
$0136	$2935			GOTO	$-1
$0137	$2932			GOTO	$-5
$0138	$3078			MOVLW	120
$0139	$00FA			MOVWF	STACK_10
$013A	$0BFA			DECFSZ	STACK_10, F
$013B	$293A			GOTO	$-1
$013C	$0000			NOP
$013D	$0000			NOP
;memoriai2c.c,58 :: 		}
$013E	$0008			RETURN
$013F	$	_Recupera_Dados:
;memoriai2c.c,65 :: 		void Recupera_Dados(void)
;memoriai2c.c,67 :: 		for (contador=0;contador<=15;contador++)
$013F	$1303			BCF	STATUS, RP1
$0140	$1283			BCF	STATUS, RP0
$0141	$01A3			CLRF	_contador, 1
$0142	$	L_Recupera_Dados_0:
$0142	$1303			BCF	STATUS, RP1
$0143	$1283			BCF	STATUS, RP0
$0144	$0823			MOVF	_contador, 0
$0145	$3C0F			SUBLW	15
$0146	$1C03			BTFSS	STATUS, C
$0147	$2958			GOTO	L_Recupera_Dados_1
;memoriai2c.c,69 :: 		recepcao=le_i2c(contador);
$0148	$0823			MOVF	_contador, 0
$0149	$00CD			MOVWF	FARG_Le_I2C+0
$014A	$20C5			CALL	_Le_I2C
$014B	$0870			MOVF	STACK_0, 0
$014C	$00A4			MOVWF	_recepcao
;memoriai2c.c,70 :: 		Lcd8_Chr(1,contador+1,recepcao);
$014D	$3001			MOVLW	1
$014E	$00CD			MOVWF	FARG_Lcd8_Chr+0
$014F	$0A23			INCF	_contador, 0
$0150	$00CE			MOVWF	FARG_Lcd8_Chr+1
$0151	$0870			MOVF	STACK_0, 0
$0152	$00CF			MOVWF	FARG_Lcd8_Chr+2
$0153	$20DE			CALL	_Lcd8_Chr
;memoriai2c.c,71 :: 		}
$0154	$	L_Recupera_Dados_2:
;memoriai2c.c,67 :: 		for (contador=0;contador<=15;contador++)
$0154	$1303			BCF	STATUS, RP1
$0155	$1283			BCF	STATUS, RP0
$0156	$0AA3			INCF	_contador, 1
;memoriai2c.c,71 :: 		}
$0157	$2942			GOTO	L_Recupera_Dados_0
$0158	$	L_Recupera_Dados_1:
;memoriai2c.c,73 :: 		for (contador=16;contador<=31;contador++)
$0158	$3010			MOVLW	16
$0159	$1303			BCF	STATUS, RP1
$015A	$1283			BCF	STATUS, RP0
$015B	$00A3			MOVWF	_contador
$015C	$	L_Recupera_Dados_3:
$015C	$1303			BCF	STATUS, RP1
$015D	$1283			BCF	STATUS, RP0
$015E	$0823			MOVF	_contador, 0
$015F	$3C1F			SUBLW	31
$0160	$1C03			BTFSS	STATUS, C
$0161	$2973			GOTO	L_Recupera_Dados_4
;memoriai2c.c,75 :: 		recepcao=le_i2c(contador);
$0162	$0823			MOVF	_contador, 0
$0163	$00CD			MOVWF	FARG_Le_I2C+0
$0164	$20C5			CALL	_Le_I2C
$0165	$0870			MOVF	STACK_0, 0
$0166	$00A4			MOVWF	_recepcao
;memoriai2c.c,76 :: 		Lcd8_Chr(2,contador-15,recepcao);
$0167	$3002			MOVLW	2
$0168	$00CD			MOVWF	FARG_Lcd8_Chr+0
$0169	$300F			MOVLW	15
$016A	$0223			SUBWF	_contador, 0
$016B	$00CE			MOVWF	FARG_Lcd8_Chr+1
$016C	$0870			MOVF	STACK_0, 0
$016D	$00CF			MOVWF	FARG_Lcd8_Chr+2
$016E	$20DE			CALL	_Lcd8_Chr
;memoriai2c.c,77 :: 		}
$016F	$	L_Recupera_Dados_5:
;memoriai2c.c,73 :: 		for (contador=16;contador<=31;contador++)
$016F	$1303			BCF	STATUS, RP1
$0170	$1283			BCF	STATUS, RP0
$0171	$0AA3			INCF	_contador, 1
;memoriai2c.c,77 :: 		}
$0172	$295C			GOTO	L_Recupera_Dados_3
$0173	$	L_Recupera_Dados_4:
;memoriai2c.c,78 :: 		}
$0173	$0008			RETURN
$0174	$	_Usart_Data_Ready:
$0174	$3000			MOVLW	0
$0175	$1303			BCF	STATUS, RP1
$0176	$1283			BCF	STATUS, RP0
$0177	$1A8C			BTFSC	PIR1, 5
$0178	$3001			MOVLW	1
$0179	$00F1			MOVWF	STACK_1
$017A	$0871			MOVF	STACK_1, 0
$017B	$00F0			MOVWF	STACK_0
$017C	$0008			RETURN
$017D	$	_Usart_Read:
$017D	$1303			BCF	STATUS, RP1
$017E	$1283			BCF	STATUS, RP0
$017F	$081A			MOVF	RCREG, 0
$0180	$00C8			MOVWF	Usart_Read_tmp_L0
$0181	$1C98			BTFSS	RCSTA, 1
$0182	$2985			GOTO	L_Usart_Read_2
$0183	$1218			BCF	RCSTA, 4
$0184	$1618			BSF	RCSTA, 4
$0185	$	L_Usart_Read_2:
$0185	$1303			BCF	STATUS, RP1
$0186	$1283			BCF	STATUS, RP0
$0187	$0848			MOVF	Usart_Read_tmp_L0, 0
$0188	$00F0			MOVWF	STACK_0
$0189	$0008			RETURN
$018A	$	_Usart_Write:
$018A	$	L_Usart_Write_3:
$018A	$3000			MOVLW	0
$018B	$1303			BCF	STATUS, RP1
$018C	$1683			BSF	STATUS, RP0
$018D	$1898			BTFSC	TXSTA, 1
$018E	$3001			MOVLW	1
$018F	$00F1			MOVWF	STACK_1
$0190	$0871			MOVF	STACK_1, 0
$0191	$3A00			XORLW	0
$0192	$1D03			BTFSS	STATUS, Z
$0193	$2996			GOTO	L_Usart_Write_4
$0194	$0000			NOP
$0195	$298A			GOTO	L_Usart_Write_3
$0196	$	L_Usart_Write_4:
$0196	$1303			BCF	STATUS, RP1
$0197	$1283			BCF	STATUS, RP0
$0198	$0848			MOVF	FARG_Usart_Write+0, 0
$0199	$0099			MOVWF	TXREG
$019A	$0008			RETURN
$019B	$	_Salva_Dados:
;memoriai2c.c,84 :: 		void Salva_Dados(void)
;memoriai2c.c,86 :: 		for (contador=0;contador<=31;contador++)
$019B	$1303			BCF	STATUS, RP1
$019C	$1283			BCF	STATUS, RP0
$019D	$01A3			CLRF	_contador, 1
$019E	$	L_Salva_Dados_6:
$019E	$1303			BCF	STATUS, RP1
$019F	$1283			BCF	STATUS, RP0
$01A0	$0823			MOVF	_contador, 0
$01A1	$3C1F			SUBLW	31
$01A2	$1C03			BTFSS	STATUS, C
$01A3	$29B0			GOTO	L_Salva_Dados_7
;memoriai2c.c,87 :: 		escrever_i2c(contador,buffer[contador]);
$01A4	$0823			MOVF	_contador, 0
$01A5	$00CD			MOVWF	FARG_Escrever_I2C+0
$01A6	$0823			MOVF	_contador, 0
$01A7	$3F25			ADDLW	_buffer
$01A8	$0084			MOVWF	FSR
$01A9	$0800			MOVF	INDF, 0
$01AA	$00CE			MOVWF	FARG_Escrever_I2C+1
$01AB	$211F			CALL	_Escrever_I2C
$01AC	$	L_Salva_Dados_8:
;memoriai2c.c,86 :: 		for (contador=0;contador<=31;contador++)
$01AC	$1303			BCF	STATUS, RP1
$01AD	$1283			BCF	STATUS, RP0
$01AE	$0AA3			INCF	_contador, 1
;memoriai2c.c,87 :: 		escrever_i2c(contador,buffer[contador]);
$01AF	$299E			GOTO	L_Salva_Dados_6
$01B0	$	L_Salva_Dados_7:
;memoriai2c.c,88 :: 		}
$01B0	$0008			RETURN
$01B1	$	_I2C_Init:
$01B1	$1303			BCF	STATUS, RP1
$01B2	$1683			BSF	STATUS, RP0
$01B3	$1314			BCF	SSPSTAT, 6
$01B4	$1394			BCF	SSPSTAT, 7
$01B5	$3038			MOVLW	56
$01B6	$1283			BCF	STATUS, RP0
$01B7	$0094			MOVWF	SSPCON
$01B8	$3038			MOVLW	56
$01B9	$1683			BSF	STATUS, RP0
$01BA	$0487			IORWF	TRISC, 1
$01BB	$0008			RETURN
$01BC	$	_Lcd8_Init:
$01BC	$201C			CALL	_Delay_5500us
$01BD	$201C			CALL	_Delay_5500us
$01BE	$201C			CALL	_Delay_5500us
$01BF	$1303			BCF	STATUS, RP1
$01C0	$1283			BCF	STATUS, RP0
$01C1	$0849			MOVF	FARG_Lcd8_Init+1, 0
$01C2	$00A0			MOVWF	lcd8bit_DataAddress
$01C3	$0849			MOVF	FARG_Lcd8_Init+1, 0
$01C4	$0084			MOVWF	FSR
$01C5	$1784			BSF	FSR, 7
$01C6	$0180			CLRF	INDF, 1
$01C7	$0848			MOVF	FARG_Lcd8_Init+0, 0
$01C8	$00A1			MOVWF	lcd8bit_CtrlAddress
$01C9	$0848			MOVF	FARG_Lcd8_Init+0, 0
$01CA	$0084			MOVWF	FSR
$01CB	$1180			BCF	INDF, __LCD8_RW
$01CC	$1784			BSF	FSR, 7
$01CD	$1100			BCF	INDF, __LCD8_RS
$01CE	$1180			BCF	INDF, __LCD8_RW
$01CF	$1080			BCF	INDF, __LCD8_ENABLE
$01D0	$1384			BCF	FSR, 7
$01D1	$3001			MOVLW	1
$01D2	$00A2			MOVWF	_com
$01D3	$3030			MOVLW	48
$01D4	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01D5	$209C			CALL	_Lcd8_Cmd
$01D6	$3030			MOVLW	48
$01D7	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01D8	$209C			CALL	_Lcd8_Cmd
$01D9	$3030			MOVLW	48
$01DA	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01DB	$209C			CALL	_Lcd8_Cmd
$01DC	$3038			MOVLW	56
$01DD	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01DE	$209C			CALL	_Lcd8_Cmd
$01DF	$3008			MOVLW	8
$01E0	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01E1	$209C			CALL	_Lcd8_Cmd
$01E2	$3001			MOVLW	1
$01E3	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01E4	$209C			CALL	_Lcd8_Cmd
$01E5	$3006			MOVLW	6
$01E6	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01E7	$209C			CALL	_Lcd8_Cmd
$01E8	$300C			MOVLW	12
$01E9	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$01EA	$209C			CALL	_Lcd8_Cmd
$01EB	$0008			RETURN
$01EC	$	_Usart_Init:
$01EC	$1303			BCF	STATUS, RP1
$01ED	$1683			BSF	STATUS, RP0
$01EE	$1698			BSF	TXSTA, 5
$01EF	$3090			MOVLW	144
$01F0	$1283			BCF	STATUS, RP0
$01F1	$0098			MOVWF	RCSTA
$01F2	$1683			BSF	STATUS, RP0
$01F3	$1787			BSF	TRISC, 7
$01F4	$1307			BCF	TRISC, 6
$01F5	$	L_Usart_Init_0:
$01F5	$1303			BCF	STATUS, RP1
$01F6	$1283			BCF	STATUS, RP0
$01F7	$1E8C			BTFSS	PIR1, 5
$01F8	$29FC			GOTO	L_Usart_Init_1
$01F9	$081A			MOVF	RCREG, 0
$01FA	$00CC			MOVWF	Usart_Init_tmp_L0
$01FB	$29F5			GOTO	L_Usart_Init_0
$01FC	$	L_Usart_Init_1:
$01FC	$0008			RETURN
$01FD	$	_main:
;memoriai2c.c,95 :: 		void main(void)
;memoriai2c.c,97 :: 		trisa=0b11111111;             // põe todos os pinos para entrada
$01FD	$30FF			MOVLW	255
$01FE	$1303			BCF	STATUS, RP1
$01FF	$1683			BSF	STATUS, RP0
$0200	$0085			MOVWF	TRISA
;memoriai2c.c,98 :: 		trisd=0b00000000;
$0201	$0188			CLRF	TRISD, 1
;memoriai2c.c,99 :: 		trise=0b00000001;             //configura i/os
$0202	$3001			MOVLW	1
$0203	$0089			MOVWF	TRISE
;memoriai2c.c,100 :: 		adcon1=7;                     //desliga todos os a/ds
$0204	$3007			MOVLW	7
$0205	$009F			MOVWF	ADCON1
;memoriai2c.c,101 :: 		I2C_init(100000);             //inicializa o módulo para funcionar a 100kHz
$0206	$300A			MOVLW	10
$0207	$0093			MOVWF	SSPADD
$0208	$21B1			CALL	_I2C_Init
;memoriai2c.c,103 :: 		option_reg=0b10000000;        //configura prescaler do timer 0
$0209	$3080			MOVLW	128
$020A	$0081			MOVWF	OPTION_REG
;memoriai2c.c,104 :: 		Lcd8_Config(&PORTE, &PORTD, 2, 1, 3, 7, 6, 5, 4, 3, 2, 1, 0);
$020B	$3009			MOVLW	PORTE
$020C	$1283			BCF	STATUS, RP0
$020D	$00C8			MOVWF	FARG_Lcd8_Init+0
$020E	$3008			MOVLW	PORTD
$020F	$00C9			MOVWF	FARG_Lcd8_Init+1
$0210	$21BC			CALL	_Lcd8_Init
;memoriai2c.c,105 :: 		Lcd8_Cmd(LCD_CLEAR);          //limpa o display
$0211	$3001			MOVLW	1
$0212	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$0213	$209C			CALL	_Lcd8_Cmd
;memoriai2c.c,106 :: 		Lcd8_Cmd(LCD_CURSOR_OFF);     //Desliga o cursor
$0214	$300C			MOVLW	12
$0215	$00D0			MOVWF	FARG_Lcd8_Cmd+0
$0216	$209C			CALL	_Lcd8_Cmd
;memoriai2c.c,107 :: 		Usart_Init(9600);             //Inicializa o módulo Usart para trabalhar a 9600bps
$0217	$3019			MOVLW	25
$0218	$1683			BSF	STATUS, RP0
$0219	$0099			MOVWF	SPBRG
$021A	$1518			BSF	TXSTA, BRGH
$021B	$21EC			CALL	_Usart_Init
;memoriai2c.c,108 :: 		Recupera_Dados();             //Chama rotina para ler e mostrar os
$021C	$213F			CALL	_Recupera_Dados
;memoriai2c.c,110 :: 		linha=1;
$021D	$3001			MOVLW	1
$021E	$00C5			MOVWF	_linha
;memoriai2c.c,111 :: 		coluna=1;
$021F	$3001			MOVLW	1
$0220	$00C6			MOVWF	_coluna
;memoriai2c.c,112 :: 		controle=0;
$0221	$01C7			CLRF	_controle, 1
;memoriai2c.c,114 :: 		while (1)
$0222	$	L_main_9:
;memoriai2c.c,116 :: 		if (usart_data_ready())
$0222	$2174			CALL	_Usart_Data_Ready
$0223	$1303			BCF	STATUS, RP1
$0224	$1283			BCF	STATUS, RP0
$0225	$0870			MOVF	STACK_0, 0
$0226	$1903			BTFSC	STATUS, Z
$0227	$2A53			GOTO	L_main_11
;memoriai2c.c,118 :: 		recepcao=Usart_Read();
$0228	$217D			CALL	_Usart_Read
$0229	$0870			MOVF	STACK_0, 0
$022A	$00A4			MOVWF	_recepcao
;memoriai2c.c,119 :: 		Usart_Write(recepcao);
$022B	$0870			MOVF	STACK_0, 0
$022C	$00C8			MOVWF	FARG_Usart_Write+0
$022D	$218A			CALL	_Usart_Write
;memoriai2c.c,120 :: 		buffer[controle]=recepcao;
$022E	$0847			MOVF	_controle, 0
$022F	$3F25			ADDLW	_buffer
$0230	$00F0			MOVWF	STACK_0
$0231	$0870			MOVF	STACK_0, 0
$0232	$0084			MOVWF	FSR
$0233	$0824			MOVF	_recepcao, 0
$0234	$0080			MOVWF	INDF
;memoriai2c.c,121 :: 		controle=controle+1;      //salva dado no buffer
$0235	$0AC7			INCF	_controle, 1
;memoriai2c.c,122 :: 		Lcd8_Chr(linha,coluna,recepcao);
$0236	$0845			MOVF	_linha, 0
$0237	$00CD			MOVWF	FARG_Lcd8_Chr+0
$0238	$0846			MOVF	_coluna, 0
$0239	$00CE			MOVWF	FARG_Lcd8_Chr+1
$023A	$0824			MOVF	_recepcao, 0
$023B	$00CF			MOVWF	FARG_Lcd8_Chr+2
$023C	$20DE			CALL	_Lcd8_Chr
;memoriai2c.c,123 :: 		coluna++;
$023D	$0AC6			INCF	_coluna, 1
;memoriai2c.c,124 :: 		if (coluna==17)
$023E	$0846			MOVF	_coluna, 0
$023F	$3A11			XORLW	17
$0240	$1D03			BTFSS	STATUS, Z
$0241	$2A53			GOTO	L_main_12
;memoriai2c.c,126 :: 		coluna=1;
$0242	$3001			MOVLW	1
$0243	$00C6			MOVWF	_coluna
;memoriai2c.c,127 :: 		if (linha==1) linha=2;
$0244	$0845			MOVF	_linha, 0
$0245	$3A01			XORLW	1
$0246	$1D03			BTFSS	STATUS, Z
$0247	$2A4B			GOTO	L_main_13
$0248	$3002			MOVLW	2
$0249	$00C5			MOVWF	_linha
$024A	$2A4F			GOTO	L_main_14
$024B	$	L_main_13:
;memoriai2c.c,128 :: 		else          linha=1;
$024B	$3001			MOVLW	1
$024C	$1303			BCF	STATUS, RP1
$024D	$1283			BCF	STATUS, RP0
$024E	$00C5			MOVWF	_linha
$024F	$	L_main_14:
;memoriai2c.c,130 :: 		Salva_Dados();          //Chama rotina para salvar dados na I2C
$024F	$219B			CALL	_Salva_Dados
;memoriai2c.c,131 :: 		controle=0;
$0250	$1303			BCF	STATUS, RP1
$0251	$1283			BCF	STATUS, RP0
$0252	$01C7			CLRF	_controle, 1
;memoriai2c.c,132 :: 		}
$0253	$	L_main_12:
;memoriai2c.c,133 :: 		}
$0253	$	L_main_11:
;memoriai2c.c,134 :: 		}
$0253	$2A22			GOTO	L_main_9
;memoriai2c.c,135 :: 		}
$0254	$2A54			GOTO	$
