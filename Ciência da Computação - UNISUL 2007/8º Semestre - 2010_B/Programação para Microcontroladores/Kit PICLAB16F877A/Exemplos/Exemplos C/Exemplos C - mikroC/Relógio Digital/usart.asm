;  ASM code generated by mikroVirtualMachine for PIC - V. 6.2.1.0
;  Date/Time: 29/7/2007 12:51:22
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2911			GOTO	_main
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00AC			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00AB			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00AD			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0870			MOVF	STACK_0, 0
$000E	$00AF			MOVWF	STSAVED_0
;usart.c,102 :: 		void interrupt(void)
;usart.c,105 :: 		if (intcon.t0if == 1)             //Tratamento da interrupção
$000F	$3000			MOVLW	0
$0010	$190B			BTFSC	INTCON, 2
$0011	$3001			MOVLW	1
$0012	$00F2			MOVWF	STACK_2
$0013	$0872			MOVF	STACK_2, 0
$0014	$3A01			XORLW	1
$0015	$1D03			BTFSS	STATUS, Z
$0016	$2862			GOTO	L_interrupt_18
;usart.c,107 :: 		intcon.t0if=0;                //de timer 0
$0017	$110B			BCF	INTCON, 2
;usart.c,108 :: 		indice++;
$0018	$0AA0			INCF	_indice, 1
;usart.c,110 :: 		switch(indice)
$0019	$2851			GOTO	L_interrupt_19
;usart.c,112 :: 		case 1:
$001A	$	L_interrupt_21:
;usart.c,113 :: 		portb.f4=0;
$001A	$1206			BCF	PORTB, 4
;usart.c,114 :: 		portd=vetor_display[indice-1];
$001B	$3001			MOVLW	1
$001C	$0220			SUBWF	_indice, 0
$001D	$00F0			MOVWF	STACK_0
$001E	$01F1			CLRF	STACK_0+1
$001F	$1C03			BTFSS	STATUS, C
$0020	$03F1			DECF	STACK_0+1, 1
$0021	$0870			MOVF	STACK_0, 0
$0022	$3F21			ADDLW	_vetor_display
$0023	$0084			MOVWF	FSR
$0024	$0800			MOVF	INDF, 0
$0025	$0088			MOVWF	PORTD
;usart.c,115 :: 		portb.f1=1;
$0026	$1486			BSF	PORTB, 1
;usart.c,116 :: 		break;
$0027	$2861			GOTO	L_interrupt_20
;usart.c,118 :: 		case 2:
$0028	$	L_interrupt_22:
;usart.c,119 :: 		portb.f1=0;
$0028	$1086			BCF	PORTB, 1
;usart.c,120 :: 		portd=vetor_display[indice-1];
$0029	$3001			MOVLW	1
$002A	$0220			SUBWF	_indice, 0
$002B	$00F0			MOVWF	STACK_0
$002C	$01F1			CLRF	STACK_0+1
$002D	$1C03			BTFSS	STATUS, C
$002E	$03F1			DECF	STACK_0+1, 1
$002F	$0870			MOVF	STACK_0, 0
$0030	$3F21			ADDLW	_vetor_display
$0031	$0084			MOVWF	FSR
$0032	$0800			MOVF	INDF, 0
$0033	$0088			MOVWF	PORTD
;usart.c,121 :: 		portb.f2=1;
$0034	$1506			BSF	PORTB, 2
;usart.c,122 :: 		break;
$0035	$2861			GOTO	L_interrupt_20
;usart.c,124 :: 		case 3:
$0036	$	L_interrupt_23:
;usart.c,125 :: 		portb.f2=0;
$0036	$1106			BCF	PORTB, 2
;usart.c,126 :: 		portd=vetor_display[indice-1];
$0037	$3001			MOVLW	1
$0038	$0220			SUBWF	_indice, 0
$0039	$00F0			MOVWF	STACK_0
$003A	$01F1			CLRF	STACK_0+1
$003B	$1C03			BTFSS	STATUS, C
$003C	$03F1			DECF	STACK_0+1, 1
$003D	$0870			MOVF	STACK_0, 0
$003E	$3F21			ADDLW	_vetor_display
$003F	$0084			MOVWF	FSR
$0040	$0800			MOVF	INDF, 0
$0041	$0088			MOVWF	PORTD
;usart.c,127 :: 		portb.f3=1;
$0042	$1586			BSF	PORTB, 3
;usart.c,128 :: 		break;
$0043	$2861			GOTO	L_interrupt_20
;usart.c,130 :: 		case 2:
$0044	$	L_interrupt_24:
;usart.c,131 :: 		indice=0;
$0044	$01A0			CLRF	_indice, 1
;usart.c,132 :: 		portb.f3=0;
$0045	$1186			BCF	PORTB, 3
;usart.c,133 :: 		portd=vetor_display[indice-1];
$0046	$30FF			MOVLW	255
$0047	$00F0			MOVWF	STACK_0
$0048	$30FF			MOVLW	255
$0049	$00F1			MOVWF	STACK_0+1
$004A	$0870			MOVF	STACK_0, 0
$004B	$3F21			ADDLW	_vetor_display
$004C	$0084			MOVWF	FSR
$004D	$0800			MOVF	INDF, 0
$004E	$0088			MOVWF	PORTD
;usart.c,134 :: 		portb.f4=1;
$004F	$1606			BSF	PORTB, 4
;usart.c,135 :: 		break;
$0050	$2861			GOTO	L_interrupt_20
;usart.c,137 :: 		}
$0051	$	L_interrupt_19:
$0051	$0820			MOVF	_indice, 0
$0052	$3A01			XORLW	1
$0053	$1903			BTFSC	STATUS, Z
$0054	$281A			GOTO	L_interrupt_21
$0055	$0820			MOVF	_indice, 0
$0056	$3A02			XORLW	2
$0057	$1903			BTFSC	STATUS, Z
$0058	$2828			GOTO	L_interrupt_22
$0059	$0820			MOVF	_indice, 0
$005A	$3A03			XORLW	3
$005B	$1903			BTFSC	STATUS, Z
$005C	$2836			GOTO	L_interrupt_23
$005D	$0820			MOVF	_indice, 0
$005E	$3A02			XORLW	2
$005F	$1903			BTFSC	STATUS, Z
$0060	$2844			GOTO	L_interrupt_24
$0061	$	L_interrupt_20:
;usart.c,138 :: 		}
$0061	$2890			GOTO	L_interrupt_25
$0062	$	L_interrupt_18:
;usart.c,141 :: 		tmr1h=0X0B;
$0062	$300B			MOVLW	11
$0063	$008F			MOVWF	TMR1H
;usart.c,142 :: 		tmr1l=0XDC;
$0064	$30DC			MOVLW	220
$0065	$008E			MOVWF	TMR1L
;usart.c,143 :: 		pir1.tmr1if=0;            //limpa flag de interrupção
$0066	$100C			BCF	PIR1, 0
;usart.c,144 :: 		pisca=!pisca;           //inverte o estado do pisca
$0067	$0825			MOVF	_pisca, 0
$0068	$3001			MOVLW	1
$0069	$1D03			BTFSS	STATUS, Z
$006A	$3000			MOVLW	0
$006B	$00A5			MOVWF	_pisca
;usart.c,145 :: 		vezes_tmr1--;            //decrementa variável para dar 1 segundo
$006C	$03A6			DECF	_vezes_tmr1, 1
;usart.c,147 :: 		if (vezes_tmr1==0)
$006D	$0826			MOVF	_vezes_tmr1, 0
$006E	$3A00			XORLW	0
$006F	$1D03			BTFSS	STATUS, Z
$0070	$2890			GOTO	L_interrupt_26
;usart.c,149 :: 		vezes_tmr1=120;
$0071	$3078			MOVLW	120
$0072	$00A6			MOVWF	_vezes_tmr1
;usart.c,150 :: 		minuto_lsb++;
$0073	$0AA7			INCF	_minuto_lsb, 1
;usart.c,152 :: 		if (minuto_lsb==10)
$0074	$0827			MOVF	_minuto_lsb, 0
$0075	$3A0A			XORLW	10
$0076	$1D03			BTFSS	STATUS, Z
$0077	$2890			GOTO	L_interrupt_27
;usart.c,154 :: 		minuto_lsb=0;
$0078	$01A7			CLRF	_minuto_lsb, 1
;usart.c,155 :: 		minuto_msb++;
$0079	$0AA8			INCF	_minuto_msb, 1
;usart.c,156 :: 		if (minuto_msb==6)
$007A	$0828			MOVF	_minuto_msb, 0
$007B	$3A06			XORLW	6
$007C	$1D03			BTFSS	STATUS, Z
$007D	$2890			GOTO	L_interrupt_28
;usart.c,158 :: 		minuto_msb=0;
$007E	$01A8			CLRF	_minuto_msb, 1
;usart.c,159 :: 		hora_lsb++;
$007F	$0AA9			INCF	_hora_lsb, 1
;usart.c,160 :: 		if (hora_msb==2)
$0080	$082A			MOVF	_hora_msb, 0
$0081	$3A02			XORLW	2
$0082	$1D03			BTFSS	STATUS, Z
$0083	$288A			GOTO	L_interrupt_29
;usart.c,162 :: 		if (hora_lsb==4)
$0084	$0829			MOVF	_hora_lsb, 0
$0085	$3A04			XORLW	4
$0086	$1D03			BTFSS	STATUS, Z
$0087	$288A			GOTO	L_interrupt_30
;usart.c,164 :: 		hora_msb=0;
$0088	$01AA			CLRF	_hora_msb, 1
;usart.c,165 :: 		hora_lsb=0;
$0089	$01A9			CLRF	_hora_lsb, 1
;usart.c,166 :: 		}
$008A	$	L_interrupt_30:
;usart.c,167 :: 		}
$008A	$	L_interrupt_29:
;usart.c,168 :: 		if (hora_lsb==10)
$008A	$0829			MOVF	_hora_lsb, 0
$008B	$3A0A			XORLW	10
$008C	$1D03			BTFSS	STATUS, Z
$008D	$2890			GOTO	L_interrupt_31
;usart.c,170 :: 		hora_lsb=0;
$008E	$01A9			CLRF	_hora_lsb, 1
;usart.c,171 :: 		hora_msb++;
$008F	$0AAA			INCF	_hora_msb, 1
;usart.c,172 :: 		}
$0090	$	L_interrupt_31:
;usart.c,173 :: 		}
$0090	$	L_interrupt_28:
;usart.c,174 :: 		}
$0090	$	L_interrupt_27:
;usart.c,176 :: 		}
$0090	$	L_interrupt_26:
;usart.c,177 :: 		}
$0090	$	L_interrupt_25:
;usart.c,178 :: 		}
$0090	$	L_Interrupt_end:
$0090	$082F			MOVF	STSAVED_0, 0
$0091	$00F0			MOVWF	STACK_0
$0092	$082D			MOVF	?savePCLATH, 0
$0093	$008A			MOVWF	PCLATH
$0094	$082B			MOVF	?saveFSR, 0
$0095	$0084			MOVWF	FSR
$0096	$0E2C			SWAPF	?saveSTATUS, 0
$0097	$0083			MOVWF	STATUS
$0098	$0EFF			SWAPF	STACK_15, 1
$0099	$0E7F			SWAPF	STACK_15, 0
$009A	$0009			RETFIE
$009B	$	_Converte_to_7seg:
;usart.c,59 :: 		unsigned char Converte_to_7seg (char dado)
;usart.c,61 :: 		switch(dado)           //tabela de conversão para display de 7 segmentos
$009B	$28CE			GOTO	L_Converte_to_7seg_0
;usart.c,63 :: 		case 0 : return(CHR_0);
$009C	$	L_Converte_to_7seg_2:
$009C	$303F			MOVLW	63
$009D	$1303			BCF	STATUS, RP1
$009E	$1283			BCF	STATUS, RP0
$009F	$00F0			MOVWF	STACK_0
$00A0	$0008			RETURN
;usart.c,65 :: 		case 1 : return(CHR_1);
$00A1	$	L_Converte_to_7seg_3:
$00A1	$3006			MOVLW	6
$00A2	$00F0			MOVWF	STACK_0
$00A3	$0008			RETURN
;usart.c,67 :: 		case 2 : return(CHR_2);
$00A4	$	L_Converte_to_7seg_4:
$00A4	$305B			MOVLW	91
$00A5	$00F0			MOVWF	STACK_0
$00A6	$0008			RETURN
;usart.c,69 :: 		case 3 : return(CHR_3);
$00A7	$	L_Converte_to_7seg_5:
$00A7	$304F			MOVLW	79
$00A8	$00F0			MOVWF	STACK_0
$00A9	$0008			RETURN
;usart.c,71 :: 		case 4 : return(CHR_4);
$00AA	$	L_Converte_to_7seg_6:
$00AA	$3066			MOVLW	102
$00AB	$00F0			MOVWF	STACK_0
$00AC	$0008			RETURN
;usart.c,73 :: 		case 5 : return(CHR_5);
$00AD	$	L_Converte_to_7seg_7:
$00AD	$306D			MOVLW	109
$00AE	$00F0			MOVWF	STACK_0
$00AF	$0008			RETURN
;usart.c,75 :: 		case 6 : return(CHR_6);
$00B0	$	L_Converte_to_7seg_8:
$00B0	$307D			MOVLW	125
$00B1	$00F0			MOVWF	STACK_0
$00B2	$0008			RETURN
;usart.c,77 :: 		case 7 : return(CHR_7);
$00B3	$	L_Converte_to_7seg_9:
$00B3	$3007			MOVLW	7
$00B4	$00F0			MOVWF	STACK_0
$00B5	$0008			RETURN
;usart.c,79 :: 		case 8 : return(CHR_8);
$00B6	$	L_Converte_to_7seg_10:
$00B6	$307F			MOVLW	127
$00B7	$00F0			MOVWF	STACK_0
$00B8	$0008			RETURN
;usart.c,81 :: 		case 9 : return(CHR_9);
$00B9	$	L_Converte_to_7seg_11:
$00B9	$306F			MOVLW	111
$00BA	$00F0			MOVWF	STACK_0
$00BB	$0008			RETURN
;usart.c,83 :: 		case 10 : return(CHR_A);
$00BC	$	L_Converte_to_7seg_12:
$00BC	$3077			MOVLW	119
$00BD	$00F0			MOVWF	STACK_0
$00BE	$0008			RETURN
;usart.c,85 :: 		case 11 : return(CHR_B);
$00BF	$	L_Converte_to_7seg_13:
$00BF	$307C			MOVLW	124
$00C0	$00F0			MOVWF	STACK_0
$00C1	$0008			RETURN
;usart.c,87 :: 		case 12 : return(CHR_C);
$00C2	$	L_Converte_to_7seg_14:
$00C2	$3039			MOVLW	57
$00C3	$00F0			MOVWF	STACK_0
$00C4	$0008			RETURN
;usart.c,89 :: 		case 13 : return(CHR_D);
$00C5	$	L_Converte_to_7seg_15:
$00C5	$305E			MOVLW	94
$00C6	$00F0			MOVWF	STACK_0
$00C7	$0008			RETURN
;usart.c,91 :: 		case 14 : return(CHR_E);
$00C8	$	L_Converte_to_7seg_16:
$00C8	$3079			MOVLW	121
$00C9	$00F0			MOVWF	STACK_0
$00CA	$0008			RETURN
;usart.c,93 :: 		case 15 : return(CHR_F);
$00CB	$	L_Converte_to_7seg_17:
$00CB	$3071			MOVLW	113
$00CC	$00F0			MOVWF	STACK_0
$00CD	$0008			RETURN
;usart.c,95 :: 		}
$00CE	$	L_Converte_to_7seg_0:
$00CE	$1303			BCF	STATUS, RP1
$00CF	$1283			BCF	STATUS, RP0
$00D0	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00D1	$3A00			XORLW	0
$00D2	$1903			BTFSC	STATUS, Z
$00D3	$289C			GOTO	L_Converte_to_7seg_2
$00D4	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00D5	$3A01			XORLW	1
$00D6	$1903			BTFSC	STATUS, Z
$00D7	$28A1			GOTO	L_Converte_to_7seg_3
$00D8	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00D9	$3A02			XORLW	2
$00DA	$1903			BTFSC	STATUS, Z
$00DB	$28A4			GOTO	L_Converte_to_7seg_4
$00DC	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00DD	$3A03			XORLW	3
$00DE	$1903			BTFSC	STATUS, Z
$00DF	$28A7			GOTO	L_Converte_to_7seg_5
$00E0	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00E1	$3A04			XORLW	4
$00E2	$1903			BTFSC	STATUS, Z
$00E3	$28AA			GOTO	L_Converte_to_7seg_6
$00E4	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00E5	$3A05			XORLW	5
$00E6	$1903			BTFSC	STATUS, Z
$00E7	$28AD			GOTO	L_Converte_to_7seg_7
$00E8	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00E9	$3A06			XORLW	6
$00EA	$1903			BTFSC	STATUS, Z
$00EB	$28B0			GOTO	L_Converte_to_7seg_8
$00EC	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00ED	$3A07			XORLW	7
$00EE	$1903			BTFSC	STATUS, Z
$00EF	$28B3			GOTO	L_Converte_to_7seg_9
$00F0	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00F1	$3A08			XORLW	8
$00F2	$1903			BTFSC	STATUS, Z
$00F3	$28B6			GOTO	L_Converte_to_7seg_10
$00F4	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00F5	$3A09			XORLW	9
$00F6	$1903			BTFSC	STATUS, Z
$00F7	$28B9			GOTO	L_Converte_to_7seg_11
$00F8	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00F9	$3A0A			XORLW	10
$00FA	$1903			BTFSC	STATUS, Z
$00FB	$28BC			GOTO	L_Converte_to_7seg_12
$00FC	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$00FD	$3A0B			XORLW	11
$00FE	$1903			BTFSC	STATUS, Z
$00FF	$28BF			GOTO	L_Converte_to_7seg_13
$0100	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$0101	$3A0C			XORLW	12
$0102	$1903			BTFSC	STATUS, Z
$0103	$28C2			GOTO	L_Converte_to_7seg_14
$0104	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$0105	$3A0D			XORLW	13
$0106	$1903			BTFSC	STATUS, Z
$0107	$28C5			GOTO	L_Converte_to_7seg_15
$0108	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$0109	$3A0E			XORLW	14
$010A	$1903			BTFSC	STATUS, Z
$010B	$28C8			GOTO	L_Converte_to_7seg_16
$010C	$082E			MOVF	FARG_Converte_to_7seg+0, 0
$010D	$3A0F			XORLW	15
$010E	$1903			BTFSC	STATUS, Z
$010F	$28CB			GOTO	L_Converte_to_7seg_17
$0110	$	L_Converte_to_7seg_1:
;usart.c,96 :: 		}
$0110	$0008			RETURN
$0111	$	_main:
;usart.c,186 :: 		void main(void)
;usart.c,189 :: 		trisa=0b00000000;
$0111	$1303			BCF	STATUS, RP1
$0112	$1683			BSF	STATUS, RP0
$0113	$0185			CLRF	TRISA, 1
;usart.c,190 :: 		trisb=0b00000000;
$0114	$0186			CLRF	TRISB, 1
;usart.c,191 :: 		trisd=0b00000000;            //configura i/os
$0115	$0188			CLRF	TRISD, 1
;usart.c,192 :: 		option_reg=0b10000000;       //configura prescaler do timer 0
$0116	$3080			MOVLW	128
$0117	$0081			MOVWF	OPTION_REG
;usart.c,193 :: 		indice=0;                    //inicializa a variável de índice
$0118	$1283			BCF	STATUS, RP0
$0119	$01A0			CLRF	_indice, 1
;usart.c,194 :: 		hora_msb=0;
$011A	$01AA			CLRF	_hora_msb, 1
;usart.c,195 :: 		hora_lsb=0;
$011B	$01A9			CLRF	_hora_lsb, 1
;usart.c,196 :: 		minuto_msb=0;
$011C	$01A8			CLRF	_minuto_msb, 1
;usart.c,197 :: 		minuto_lsb=0;               //inicializa as variáveis de tempo
$011D	$01A7			CLRF	_minuto_lsb, 1
;usart.c,198 :: 		pie1=0b00000001;             //habilita interrupção de timer 1
$011E	$3001			MOVLW	1
$011F	$1683			BSF	STATUS, RP0
$0120	$008C			MOVWF	PIE1
;usart.c,199 :: 		t1con=0b00110001;            //configura timer 1 para prescaler de 1:8
$0121	$3031			MOVLW	49
$0122	$1283			BCF	STATUS, RP0
$0123	$0090			MOVWF	T1CON
;usart.c,200 :: 		tmr1h=0x0B;
$0124	$300B			MOVLW	11
$0125	$008F			MOVWF	TMR1H
;usart.c,201 :: 		tmr1l=0xDC;
$0126	$30DC			MOVLW	220
$0127	$008E			MOVWF	TMR1L
;usart.c,202 :: 		vezes_tmr1=120;             //inicializa variável de contagem
$0128	$3078			MOVLW	120
$0129	$00A6			MOVWF	_vezes_tmr1
;usart.c,203 :: 		pisca=0;                    //inicializa variável de piscagem
$012A	$01A5			CLRF	_pisca, 1
;usart.c,204 :: 		intcon=0b11100000;          //configura interrupção de timer0
$012B	$30E0			MOVLW	224
$012C	$008B			MOVWF	INTCON
;usart.c,207 :: 		while (1)
$012D	$	L_main_32:
;usart.c,209 :: 		vetor_display[0]=Converte_to_7seg(hora_msb);
$012D	$082A			MOVF	_hora_msb, 0
$012E	$00AE			MOVWF	FARG_Converte_to_7seg+0
$012F	$209B			CALL	_Converte_to_7seg
$0130	$1303			BCF	STATUS, RP1
$0131	$1283			BCF	STATUS, RP0
$0132	$0870			MOVF	STACK_0, 0
$0133	$00A1			MOVWF	_vetor_display
;usart.c,210 :: 		vetor_display[1]=Converte_to_7seg(hora_lsb);
$0134	$0829			MOVF	_hora_lsb, 0
$0135	$00AE			MOVWF	FARG_Converte_to_7seg+0
$0136	$209B			CALL	_Converte_to_7seg
$0137	$1303			BCF	STATUS, RP1
$0138	$1283			BCF	STATUS, RP0
$0139	$0870			MOVF	STACK_0, 0
$013A	$00A2			MOVWF	_vetor_display+1
;usart.c,211 :: 		vetor_display[2]=Converte_to_7seg(minuto_msb);
$013B	$0828			MOVF	_minuto_msb, 0
$013C	$00AE			MOVWF	FARG_Converte_to_7seg+0
$013D	$209B			CALL	_Converte_to_7seg
$013E	$1303			BCF	STATUS, RP1
$013F	$1283			BCF	STATUS, RP0
$0140	$0870			MOVF	STACK_0, 0
$0141	$00A3			MOVWF	_vetor_display+2
;usart.c,212 :: 		vetor_display[3]=Converte_to_7seg(minuto_lsb);
$0142	$0827			MOVF	_minuto_lsb, 0
$0143	$00AE			MOVWF	FARG_Converte_to_7seg+0
$0144	$209B			CALL	_Converte_to_7seg
$0145	$1303			BCF	STATUS, RP1
$0146	$1283			BCF	STATUS, RP0
$0147	$0870			MOVF	STACK_0, 0
$0148	$00A4			MOVWF	_vetor_display+3
;usart.c,213 :: 		}
$0149	$292D			GOTO	L_main_32
;usart.c,215 :: 		}
$014A	$294A			GOTO	$
