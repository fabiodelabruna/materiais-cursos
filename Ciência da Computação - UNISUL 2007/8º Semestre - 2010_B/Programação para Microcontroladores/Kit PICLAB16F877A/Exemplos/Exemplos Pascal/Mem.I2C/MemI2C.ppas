{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*           Programação Em Pascal - Módulo B PIC16F877A       *
*                             Exemplo 9                       *
*                                                             *
*             CENTRO DE TREINAMENTO - Cerne Tecnologia        *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   VERSÃO : 1.0
*   DATA : 22/07/2005
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                         Descrição geral                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Este exemplo irá receber uma série de bytes da porta serial
e quando preeencher toda uma tela do display, irá
salvar este a partir de um buffer de 32 posições na
memória I2C externa}

program MemI2C;       //Definição do programa

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*             Definição e inicialização das variáveis         *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir as variáveis globais do sistema}

var
   linha,coluna,contador,controle:byte;
   recepcao:char;
   buffer:array [32] of byte;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **
*                      Declaração de Labels                   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir todos os labels utilizadas pelo sistema}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **
*                      Constantes internas                    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir as constantes utilizadas pelo sistema}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                Declaração dos flags de software             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir os flags utilizados no sistema   }

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*               Declaração das saídas do software             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*               Declaração das entradas do software            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*               Declaração de Rotinas e Interrupções           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                 Rotina de Leitura no Barramento I2C         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

function Le_I2C(endereco:byte): byte;
var aux:byte;
begin
  i2c_start;           				//Condição de início
	i2c_wr(%10100000);		  		//Envia um byte de escrita
	i2c_wr(endereco);				    //Envia endereço
	I2C_Repeated_Start;					//Nova condição de início
	i2c_wr(%10100001);				  //Envia o byte de controle de leitura
	aux:=i2c_rd(0);         		//lê o dado armazenado na E²PROM e envia nack
	i2c_stop;	                  //Condição de parada
  result:=aux;                //retorna o dado lido
end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                 Rotina de Escrita no Barramento I2C         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

procedure Escrever_I2C(endereco,dado:byte);
begin
	i2c_start;			        //Condição de início
	i2c_wr(%10100000); 	  	//Envia o byte de e escrita
	i2c_wr(endereco);		   	//Envia endereço
	i2c_wr(dado);	          //Escreve dado na E²PROM
	i2c_stop;			       		// Condição de parada
	delay_ms(5);				    // espera a gravação estar completa
end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              Rotina para ler dados da memória serial         *
*                    e apresenta-los no display                *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *}

procedure Recupera_Dados;
begin
    for contador :=0 to 15 do
     begin
      recepcao:=le_i2c(contador);
      Lcd8_Chr(1,contador+1,recepcao);
     end;
    for contador :=16 to 31 do
     begin
      recepcao:=le_i2c(contador);
      Lcd8_Chr(2,contador-15,recepcao);
     end;
end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *            Rotina para salvar o buffer do display               *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

procedure Salva_Dados;
begin
    for contador:=0 to 31 do
        escrever_i2c(contador,buffer[contador]);
end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                       Início do programa                    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Nessa parte ficará o loop principal do sistema}

begin

   trisa:=%11111111;             // põe todos os pinos para entrada
   trisd:=%00000000;
   trise:=%00000001;             //configura i/os
   adcon1:=7;                    //desliga todos os a/ds
   I2C_init(100000);             //inicializa o módulo para funcionar a 100kHz em modo master
   option_reg:=%10000000;        //configura prescaler do timer 0
   Lcd8_Config(PORTE, PORTD, 2, 1, 3, 7, 6, 5, 4, 3, 2, 1, 0);
   Lcd8_Cmd(LCD_CLEAR);          //limpa o display
   Lcd8_Cmd(LCD_CURSOR_OFF);     //Desliga o cursor
   Usart_Init(9600);             //Inicializa o módulo Usart para trabalhar a 9600bps
   Recupera_Dados;               //Chama rotina para ler e mostrar os
                                 //dados salvos na memória no display
   linha:=1;
   coluna:=1;
   controle:=0;
   
{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                       Rotina Principal                      *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

     while true do
      begin
         if usart_data_ready<>0 then
          begin
           recepcao:=Usart_Read;
           Usart_Write(recepcao);
           buffer[controle]:=recepcao;
           controle:=controle+1;      //salva dado no buffer
           Lcd8_Chr(linha,coluna,recepcao);
           coluna:=coluna+1;
           if coluna=17 then
            begin
             coluna:=1;
             if linha=1 then
               begin
                linha:=2;
               end
             else
               begin
                linha:=1;
                Salva_Dados;                 //Chama rotina para salvar dados na I2C
                controle:=0;
               end;
            end;
          end;
       end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                       Fim do programa                       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

    end.
