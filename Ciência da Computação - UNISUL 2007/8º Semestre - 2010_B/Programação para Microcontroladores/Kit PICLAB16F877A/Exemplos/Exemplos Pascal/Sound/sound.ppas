{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*           Programação Em Pascal - Módulo B PIC16F877A       *
*                             Exemplo 10                      *
*                                                             *
*             CENTRO DE TREINAMENTO - Ápice Tecnologia        *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   VERSÃO : 1.0
*   DATA : 22/07/2005
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                         Descrição geral                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Iremos neste exemplo utilizar a função de linguagem "sound"
desta forma, iremos produzir vários sons de frequências diferentes
na saída de som}

 program sound;       //Definição do programa

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*             Definição e inicialização das variáveis         *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir as variáveis globais do sistema}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **
*                      Declaração de Labels                   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir todos os labels utilizadas pelo sistema}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **
*                      Constantes internas                    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir as constantes utilizadas pelo sistema}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                Declaração dos flags de software             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Aqui iremos definir os flags utilizados no sistema   }

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*               Declaração das saídas do software             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*               Declaração das entradas do software            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*               Declaração de Rotinas e Interrupções           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *}

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                 Rotina de Leitura no Barramento I2C         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

procedure Tone1;
begin
  Sound_Play(70, 150);
end;

procedure Tone2;
begin
  Sound_Play(60, 150);
end;

procedure Tone3;
begin
  Sound_Play(50, 200);
end;

procedure Melody;
begin
  Tone1;
  Tone2;
  Tone3;
end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                       Início do programa                    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Nessa parte ficará o loop principal do sistema}

begin
      trisc:=0;
      Sound_Init(PORTC,5);  // Initialize sound engine
        
{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                       Rotina Principal                      *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

     while true do
      begin
          Melody;               // Play the chimes
          delay_ms(2000);
      end;

{* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                       Fim do programa                       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *}

    end.
