'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*           Programação Em Basic - Módulo B PIC16F877A        *
'*                             Exemplo 2                       *
'*                                                             *
'*             CENTRO DE TREINAMENTO - Ápice Tecnologia        *
'*                                                             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*   VERSÃO : 1.0
'*   DATA : 22/07/2005
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                         Descrição geral                     *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
' Implementar um relógio digital sem ajuste via teclado
' O horário será apresentado no display de 7 segmentos

'program TecladoMatricial       'Definição do programa

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*             Definição e inicialização das variáveis         *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir as variáveis globais do sistema

dim vetor_display as byte[4]
dim teclado0,teclado1 as byte
dim indice as byte

'* * * * * * * * *+ * * * * * * * * * * * * * * * * * * * * * * *
'*                      Constantes internas                    *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir as constantes utilizadas pelo sistema

const CHR_0	= %00111111		' RETORNA CARACTERE 0
const CHR_1	=	%00000110		' RETORNA CARACTERE 1
const CHR_2	=	%01011011	  ' RETORNA CARACTERE 2
const CHR_3	=	%01001111		' RETORNA CARACTERE 3
const CHR_4	=	%01100110		' RETORNA CARACTERE 4
const CHR_5	=	%01101101		' RETORNA CARACTERE 5
const CHR_6	=	%01111101		' RETORNA CARACTERE 6
const CHR_7	=	%00000111		' RETORNA CARACTERE 7
const CHR_8	=	%01111111		' RETORNA CARACTERE 8
const CHR_9	=	%01101111		' RETORNA CARACTERE 9
const CHR_A	=	%01110111		' RETORNA CARACTERE A
const CHR_B	=	%01111100		' RETORNA CARACTERE B
const CHR_C	=	%00111001		' RETORNA CARACTERE C
const CHR_D	=	%01011110		' RETORNA CARACTERE D
const CHR_E	=	%01111001		' RETORNA CARACTERE E
const CHR_F	= %01110001		' RETORNA CARACTERE F
const tecla_0 = 0
const tecla_1 = 1
const tecla_2 = 2
const tecla_3 = 3
const tecla_4 = 4
const tecla_5 = 5
const tecla_6 = 6
const tecla_7 = 7
const tecla_8 = 0
const tecla_9 = 1
const tecla_C = 2
const tecla_E = 3        'constantes para leitura de tecla

const SEL_LINHA1 = %00001110
const SEL_LINHA2 = %00001101
const SEL_LINHA3 = %00001011
const SEL_LINHA4 = %00000111 'constantes para leitura de teclas

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                Declaração dos flags de software             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Aqui iremos definir os flags utilizados no sistema

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração das saídas do software             *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração das entradas do software           *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

const  COL1	 = 4
const  COL2  = 5
const  COL3  = 0

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Declaração de Rotinas e Interrupções          *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*           Rotina de conversão de BCD para 7 segmentos       *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub function Converte_to_7seg(dim dado as byte) as byte

 select case dado          'tabela de conversão para display de 7 segmentos
    case 0
         result=CHR_0
    case 1
         result=CHR_1
    case 2
         result=CHR_2
    case 3
         result=CHR_3
    case 4
         result=CHR_4
    case 5
         result=CHR_5
    case 6
         result=CHR_6
    case 7
         result=CHR_7
    case 8
         result=CHR_8
    case 9
         result=CHR_9
    case 10
         result=CHR_A
    case 11
         result=CHR_B
    case 12
         result=CHR_C
    case 13
         result=CHR_D
    case 14
         result=CHR_E
    case 15
         result=CHR_F
 end select

end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*               Tratamento de interrupção de timer 0          *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

sub procedure interrupt

   if  testbit(intcon,t0if) = 1 then 'Tratamento da interrupção
       clearbit(intcon,t0if)         'de timer 0
       inc(indice)
       select case indice
              case 1
                   clearbit(portb,4)
                   portd=SEL_LINHA1
                   clearbit(teclado0,tecla_1)
                   clearbit(teclado0,tecla_2)
                   clearbit(teclado0,tecla_3)
                   if testbit(porta,col1) = 0 then
                         setbit(teclado0,tecla_1)
                   end if
                   if testbit(porta,col2) = 0 then
                         setbit(teclado0,tecla_2)
                   end if
                   if testbit(porte,col3) = 0 then
                         setbit(teclado0,tecla_3)
                   end if
                   portd=vetor_display[indice-1]
                   setbit(portb,1)

              case 2
                   clearbit(portb,1)
                   portd=SEL_LINHA2
                   clearbit(teclado0,tecla_4)
                   clearbit(teclado0,tecla_5)
                   clearbit(teclado0,tecla_6)
                   if testbit(porta,col1) = 0 then
                        setbit(teclado0,tecla_4)
                   end if
                   if testbit(porta,col2) = 0 then
                        setbit(teclado0,tecla_5)
                   end if
                   if testbit(porte,col3) = 0 then
                        setbit(teclado0,tecla_6)
                   end if
                   portd=vetor_display[indice-1]
                   setbit(portb,2)
              case 3
                   clearbit(portb,2)
                   portd=SEL_LINHA3
                   clearbit(teclado0,tecla_7)
                   clearbit(teclado1,tecla_8)
                   clearbit(teclado1,tecla_9)

                   if testbit(porta,col1) = 0 then
                         setbit(teclado0,tecla_7)
                   end if
                   if testbit(porta,col2) = 0 then
                         setbit(teclado1,tecla_8)
                   end if
                   if testbit(porte,col3) = 0 then
                         setbit(teclado1,tecla_9)
                   end if
                   portd=vetor_display[indice-1]
                   setbit(portb,3)
              case 4
                   clearbit(portb,3)
                   portd=SEL_LINHA4
                   clearbit(teclado1,tecla_C)
                   clearbit(teclado0,tecla_0)
                   clearbit(teclado1,tecla_E)

                   if testbit(porta,col1) = 0 then
                         setbit(teclado1,tecla_C)
                   end if
                   if testbit(porta,col2) = 0 then
                         setbit(teclado0,tecla_0)
                   end if
                   if testbit(porte,col3) = 0 then
                         setbit(teclado1,tecla_E)
                   end if
                   portd=vetor_display[indice-1]
                   setbit(portb,4)
                   indice=0       'reinicia o indice
        end select
   end if
end sub

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Início do programa                    *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Nessa parte ficará o loop principal do sistema

Main:

   trisa=%00110000
   trisb=%00000000
   trisd=%00000000
   trise=%00000001            'configura i/os
   option_reg=%10000000       'configura prescaler do timer 0
   indice=0                   'inicializa a variável de índice
   teclado0=0
   teclado1=0                 'inicializa variáveis do teclado
   adcon1=%00000111           'desliga os a/ds
   intcon=%10100000           'configura interrupção de timer0
   vetor_display[0]=0
   vetor_display[1]=0
   vetor_display[2]=0
   vetor_display[3]=0
   
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Rotina Principal                      *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

loop_principal:
     while true

       if testbit(teclado0,tecla_1) = 1 then
          vetor_display[0]=Converte_to_7seg(1)
       end if
       if testbit(teclado0,tecla_2) = 1 then
          vetor_display[0]=Converte_to_7seg(2)
       end if
       if testbit(teclado0,tecla_3) = 1 then
          vetor_display[0]=Converte_to_7seg(3)
       end if

       if testbit(teclado0,tecla_4) = 1 then
          vetor_display[1]=Converte_to_7seg(4)
       end if
       if testbit(teclado0,tecla_5) = 1 then
          vetor_display[1]=Converte_to_7seg(5)
       end if
       if testbit(teclado0,tecla_6) = 1 then
          vetor_display[1]=Converte_to_7seg(6)
       end if

       if testbit(teclado0,tecla_7) = 1 then
          vetor_display[2]=Converte_to_7seg(7)
       end if
       if testbit(teclado1,tecla_8) = 1 then
          vetor_display[2]=Converte_to_7seg(8)
       end if
       if testbit(teclado1,tecla_9) = 1 then
          vetor_display[2]=Converte_to_7seg(9)
       end if

       if testbit(teclado1,tecla_C) = 1 then
          vetor_display[3]=Converte_to_7seg(12)
       end if
       if testbit(teclado0,tecla_0) = 1 then
          vetor_display[3]=Converte_to_7seg(0)
       end if
       if testbit(teclado1,tecla_E) = 1 then
          vetor_display[3]=Converte_to_7seg(14)
       end if
       
     wend

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'*                       Fim do programa                       *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

 '   end.