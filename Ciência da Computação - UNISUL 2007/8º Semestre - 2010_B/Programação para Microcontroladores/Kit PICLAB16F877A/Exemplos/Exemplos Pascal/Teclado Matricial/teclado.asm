;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 4/3/2008 13:27:14
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2827			GOTO	_main
$0004	$	_usart_write:
;USART_c67.ppas,40 :: 		
;USART_c67.ppas,42 :: 		
$0004	$	USART_c67_L_14:
$0004	$3000			MOVLW	0
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$1898			BTFSC	TXSTA, 1
$0008	$3001			MOVLW	1
$0009	$00F1			MOVWF	STACK_1
$000A	$0871			MOVF	STACK_1, 0
$000B	$3A00			XORLW	0
$000C	$1D03			BTFSS	STATUS, Z
$000D	$2810			GOTO	USART_c67_L_15
;USART_c67.ppas,43 :: 		
$000E	$0000			NOP
$000F	$2804			GOTO	USART_c67_L_14
$0010	$	USART_c67_L_15:
;USART_c67.ppas,44 :: 		
$0010	$1283			BCF	STATUS, RP0
$0011	$0820			MOVF	FARG_USART_Write, 0
$0012	$0099			MOVWF	TXREG
$0013	$	USART_c67_L_12:
;USART_c67.ppas,45 :: 		
$0013	$0008			RETURN
$0014	$	_usart_init:
;USART_c67.ppas,22 :: 		
;USART_c67.ppas,24 :: 		
$0014	$	USART_c67_L_1:
$0014	$1303			BCF	STATUS, RP1
$0015	$1683			BSF	STATUS, RP0
$0016	$1698			BSF	TXSTA, 5
$0017	$	USART_c67_L_2:
;USART_c67.ppas,25 :: 		
$0017	$3090			MOVLW	144
$0018	$1283			BCF	STATUS, RP0
$0019	$0098			MOVWF	RCSTA
;USART_c67.ppas,31 :: 		
$001A	$	USART_c67_L_3:
$001A	$1683			BSF	STATUS, RP0
$001B	$1787			BSF	TRISC, 7
$001C	$	USART_c67_L_4:
;USART_c67.ppas,32 :: 		
$001C	$1307			BCF	TRISC, 6
$001D	$	USART_c67_L_6:
;USART_c67.ppas,35 :: 		
$001D	$	USART_c67_L_8:
$001D	$3000			MOVLW	0
$001E	$1283			BCF	STATUS, RP0
$001F	$1A8C			BTFSC	PIR1, 5
$0020	$3001			MOVLW	1
$0021	$00F1			MOVWF	STACK_1
$0022	$0871			MOVF	STACK_1, 0
$0023	$3A01			XORLW	1
$0024	$1903			BTFSC	STATUS, Z
$0025	$281D			GOTO	USART_c67_L_8
;USART_c67.ppas,36 :: 		
$0026	$	USART_c67_L_9:
$0026	$	USART_c67_L_0:
;USART_c67.ppas,37 :: 		
$0026	$0008			RETURN
$0027	$	_main:
;teclado.ppas,20 :: 		begin
;teclado.ppas,22 :: 		trisa:=%00110000;
$0027	$3030			MOVLW	48
$0028	$1303			BCF	STATUS, RP1
$0029	$1683			BSF	STATUS, RP0
$002A	$0085			MOVWF	TRISA
;teclado.ppas,23 :: 		trisb:=%00000000;
$002B	$0186			CLRF	TRISB, 1
;teclado.ppas,24 :: 		trisd:=%00000000;
$002C	$0188			CLRF	TRISD, 1
;teclado.ppas,25 :: 		trise:=%00000001;            //configura i/os
$002D	$3001			MOVLW	1
$002E	$0089			MOVWF	TRISE
;teclado.ppas,26 :: 		adcon1:=%00000111;           //desliga os a/ds
$002F	$3007			MOVLW	7
$0030	$009F			MOVWF	ADCON1
;teclado.ppas,27 :: 		usart_init(9600);            //inicializa a usart a 9600 bps
$0031	$3019			MOVLW	25
$0032	$0099			MOVWF	SPBRG
$0033	$1518			BSF	TXSTA, BRGH
$0034	$2014			CALL	_usart_init
;teclado.ppas,34 :: 		while true do
$0035	$	teclado_L_2:
;teclado.ppas,37 :: 		portd:=SEL_LINHA1;
$0035	$300E			MOVLW	14
$0036	$0088			MOVWF	PORTD
;teclado.ppas,38 :: 		if porta.4 = 0 then usart_write('1');
$0037	$3000			MOVLW	0
$0038	$1A05			BTFSC	PORTA, 4
$0039	$3001			MOVLW	1
$003A	$00F1			MOVWF	STACK_1
$003B	$0871			MOVF	STACK_1, 0
$003C	$3A00			XORLW	0
$003D	$1D03			BTFSS	STATUS, Z
$003E	$2842			GOTO	teclado_L_7
$003F	$	teclado_L_6:
$003F	$3031			MOVLW	49
$0040	$00A0			MOVWF	FARG_USART_Write
$0041	$2004			CALL	_usart_write
$0042	$	teclado_L_7:
$0042	$	teclado_L_8:
;teclado.ppas,39 :: 		if porta.5 = 0 then usart_write('2');
$0042	$3000			MOVLW	0
$0043	$1A85			BTFSC	PORTA, 5
$0044	$3001			MOVLW	1
$0045	$00F1			MOVWF	STACK_1
$0046	$0871			MOVF	STACK_1, 0
$0047	$3A00			XORLW	0
$0048	$1D03			BTFSS	STATUS, Z
$0049	$284D			GOTO	teclado_L_10
$004A	$	teclado_L_9:
$004A	$3032			MOVLW	50
$004B	$00A0			MOVWF	FARG_USART_Write
$004C	$2004			CALL	_usart_write
$004D	$	teclado_L_10:
$004D	$	teclado_L_11:
;teclado.ppas,40 :: 		if porte.0 = 0 then usart_write('3');
$004D	$3001			MOVLW	1
$004E	$0509			ANDWF	PORTE, 0
$004F	$00F1			MOVWF	STACK_1
$0050	$0871			MOVF	STACK_1, 0
$0051	$3A00			XORLW	0
$0052	$1D03			BTFSS	STATUS, Z
$0053	$2857			GOTO	teclado_L_13
$0054	$	teclado_L_12:
$0054	$3033			MOVLW	51
$0055	$00A0			MOVWF	FARG_USART_Write
$0056	$2004			CALL	_usart_write
$0057	$	teclado_L_13:
$0057	$	teclado_L_14:
;teclado.ppas,42 :: 		portd:=SEL_LINHA2;
$0057	$300D			MOVLW	13
$0058	$0088			MOVWF	PORTD
;teclado.ppas,43 :: 		if porta.4 = 0 then usart_write('4');
$0059	$3000			MOVLW	0
$005A	$1A05			BTFSC	PORTA, 4
$005B	$3001			MOVLW	1
$005C	$00F1			MOVWF	STACK_1
$005D	$0871			MOVF	STACK_1, 0
$005E	$3A00			XORLW	0
$005F	$1D03			BTFSS	STATUS, Z
$0060	$2864			GOTO	teclado_L_16
$0061	$	teclado_L_15:
$0061	$3034			MOVLW	52
$0062	$00A0			MOVWF	FARG_USART_Write
$0063	$2004			CALL	_usart_write
$0064	$	teclado_L_16:
$0064	$	teclado_L_17:
;teclado.ppas,44 :: 		if porta.5 = 0 then usart_write('5');
$0064	$3000			MOVLW	0
$0065	$1A85			BTFSC	PORTA, 5
$0066	$3001			MOVLW	1
$0067	$00F1			MOVWF	STACK_1
$0068	$0871			MOVF	STACK_1, 0
$0069	$3A00			XORLW	0
$006A	$1D03			BTFSS	STATUS, Z
$006B	$286F			GOTO	teclado_L_19
$006C	$	teclado_L_18:
$006C	$3035			MOVLW	53
$006D	$00A0			MOVWF	FARG_USART_Write
$006E	$2004			CALL	_usart_write
$006F	$	teclado_L_19:
$006F	$	teclado_L_20:
;teclado.ppas,45 :: 		if porte.0 = 0 then usart_write('6');
$006F	$3001			MOVLW	1
$0070	$0509			ANDWF	PORTE, 0
$0071	$00F1			MOVWF	STACK_1
$0072	$0871			MOVF	STACK_1, 0
$0073	$3A00			XORLW	0
$0074	$1D03			BTFSS	STATUS, Z
$0075	$2879			GOTO	teclado_L_22
$0076	$	teclado_L_21:
$0076	$3036			MOVLW	54
$0077	$00A0			MOVWF	FARG_USART_Write
$0078	$2004			CALL	_usart_write
$0079	$	teclado_L_22:
$0079	$	teclado_L_23:
;teclado.ppas,47 :: 		portd:=SEL_LINHA3;
$0079	$300B			MOVLW	11
$007A	$0088			MOVWF	PORTD
;teclado.ppas,48 :: 		if porta.4 = 0 then usart_write('7');
$007B	$3000			MOVLW	0
$007C	$1A05			BTFSC	PORTA, 4
$007D	$3001			MOVLW	1
$007E	$00F1			MOVWF	STACK_1
$007F	$0871			MOVF	STACK_1, 0
$0080	$3A00			XORLW	0
$0081	$1D03			BTFSS	STATUS, Z
$0082	$2886			GOTO	teclado_L_25
$0083	$	teclado_L_24:
$0083	$3037			MOVLW	55
$0084	$00A0			MOVWF	FARG_USART_Write
$0085	$2004			CALL	_usart_write
$0086	$	teclado_L_25:
$0086	$	teclado_L_26:
;teclado.ppas,49 :: 		if porta.5 = 0 then usart_write('8');
$0086	$3000			MOVLW	0
$0087	$1A85			BTFSC	PORTA, 5
$0088	$3001			MOVLW	1
$0089	$00F1			MOVWF	STACK_1
$008A	$0871			MOVF	STACK_1, 0
$008B	$3A00			XORLW	0
$008C	$1D03			BTFSS	STATUS, Z
$008D	$2891			GOTO	teclado_L_28
$008E	$	teclado_L_27:
$008E	$3038			MOVLW	56
$008F	$00A0			MOVWF	FARG_USART_Write
$0090	$2004			CALL	_usart_write
$0091	$	teclado_L_28:
$0091	$	teclado_L_29:
;teclado.ppas,50 :: 		if porte.0 = 0 then usart_write('9');
$0091	$3001			MOVLW	1
$0092	$0509			ANDWF	PORTE, 0
$0093	$00F1			MOVWF	STACK_1
$0094	$0871			MOVF	STACK_1, 0
$0095	$3A00			XORLW	0
$0096	$1D03			BTFSS	STATUS, Z
$0097	$289B			GOTO	teclado_L_31
$0098	$	teclado_L_30:
$0098	$3039			MOVLW	57
$0099	$00A0			MOVWF	FARG_USART_Write
$009A	$2004			CALL	_usart_write
$009B	$	teclado_L_31:
$009B	$	teclado_L_32:
;teclado.ppas,52 :: 		portd:=SEL_LINHA4;
$009B	$3007			MOVLW	7
$009C	$0088			MOVWF	PORTD
;teclado.ppas,53 :: 		if porta.4 = 0 then usart_write('C');
$009D	$3000			MOVLW	0
$009E	$1A05			BTFSC	PORTA, 4
$009F	$3001			MOVLW	1
$00A0	$00F1			MOVWF	STACK_1
$00A1	$0871			MOVF	STACK_1, 0
$00A2	$3A00			XORLW	0
$00A3	$1D03			BTFSS	STATUS, Z
$00A4	$28A8			GOTO	teclado_L_34
$00A5	$	teclado_L_33:
$00A5	$3043			MOVLW	67
$00A6	$00A0			MOVWF	FARG_USART_Write
$00A7	$2004			CALL	_usart_write
$00A8	$	teclado_L_34:
$00A8	$	teclado_L_35:
;teclado.ppas,54 :: 		if porta.5 = 0 then usart_write('0');
$00A8	$3000			MOVLW	0
$00A9	$1A85			BTFSC	PORTA, 5
$00AA	$3001			MOVLW	1
$00AB	$00F1			MOVWF	STACK_1
$00AC	$0871			MOVF	STACK_1, 0
$00AD	$3A00			XORLW	0
$00AE	$1D03			BTFSS	STATUS, Z
$00AF	$28B3			GOTO	teclado_L_37
$00B0	$	teclado_L_36:
$00B0	$3030			MOVLW	48
$00B1	$00A0			MOVWF	FARG_USART_Write
$00B2	$2004			CALL	_usart_write
$00B3	$	teclado_L_37:
$00B3	$	teclado_L_38:
;teclado.ppas,55 :: 		if porte.0 = 0 then usart_write('E');
$00B3	$3001			MOVLW	1
$00B4	$0509			ANDWF	PORTE, 0
$00B5	$00F1			MOVWF	STACK_1
$00B6	$0871			MOVF	STACK_1, 0
$00B7	$3A00			XORLW	0
$00B8	$1D03			BTFSS	STATUS, Z
$00B9	$28BD			GOTO	teclado_L_40
$00BA	$	teclado_L_39:
$00BA	$3045			MOVLW	69
$00BB	$00A0			MOVWF	FARG_USART_Write
$00BC	$2004			CALL	_usart_write
$00BD	$	teclado_L_40:
$00BD	$	teclado_L_41:
;teclado.ppas,57 :: 		end;
$00BD	$2835			GOTO	teclado_L_2
;teclado.ppas,63 :: 		end.
$00BE	$28BE			GOTO	$
