;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 4/3/2008 13:22:46
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2833			GOTO	_main
$0004	$	_usart_data_ready:
;USART_c67.ppas,48 :: 		
;USART_c67.ppas,50 :: 		
$0004	$3000			MOVLW	0
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$1A8C			BTFSC	PIR1, 5
$0008	$3001			MOVLW	1
$0009	$00F1			MOVWF	STACK_1
$000A	$0871			MOVF	STACK_1, 0
$000B	$00A0			MOVWF	_usart_data_ready_local_result
$000C	$	USART_c67_L_18:
;USART_c67.ppas,51 :: 		
$000C	$0820			MOVF	_usart_data_ready_local_result, 0
$000D	$00F0			MOVWF	STACK_0
$000E	$0008			RETURN
$000F	$	_usart_read:
;USART_c67.ppas,54 :: 		
;USART_c67.ppas,55 :: 		
$000F	$1303			BCF	STATUS, RP1
$0010	$1283			BCF	STATUS, RP0
$0011	$081A			MOVF	RCREG, 0
$0012	$00A0			MOVWF	_usart_read_local_result
;USART_c67.ppas,61 :: 		
$0013	$3000			MOVLW	0
$0014	$1898			BTFSC	RCSTA, 1
$0015	$3001			MOVLW	1
$0016	$00F1			MOVWF	STACK_1
$0017	$0871			MOVF	STACK_1, 0
$0018	$3A01			XORLW	1
$0019	$1D03			BTFSS	STATUS, Z
$001A	$281D			GOTO	USART_c67_L_21
$001B	$	USART_c67_L_20:
;USART_c67.ppas,63 :: 		
$001B	$1218			BCF	RCSTA, 4
$001C	$	USART_c67_L_24:
;USART_c67.ppas,64 :: 		
$001C	$	USART_c67_L_25:
$001C	$1618			BSF	RCSTA, 4
$001D	$	USART_c67_L_26:
;USART_c67.ppas,65 :: 		
$001D	$	USART_c67_L_21:
$001D	$	USART_c67_L_22:
$001D	$	USART_c67_L_19:
;USART_c67.ppas,66 :: 		
$001D	$0820			MOVF	_usart_read_local_result, 0
$001E	$00F0			MOVWF	STACK_0
$001F	$0008			RETURN
$0020	$	_usart_init:
;USART_c67.ppas,22 :: 		
;USART_c67.ppas,24 :: 		
$0020	$	USART_c67_L_1:
$0020	$1303			BCF	STATUS, RP1
$0021	$1683			BSF	STATUS, RP0
$0022	$1698			BSF	TXSTA, 5
$0023	$	USART_c67_L_2:
;USART_c67.ppas,25 :: 		
$0023	$3090			MOVLW	144
$0024	$1283			BCF	STATUS, RP0
$0025	$0098			MOVWF	RCSTA
;USART_c67.ppas,31 :: 		
$0026	$	USART_c67_L_3:
$0026	$1683			BSF	STATUS, RP0
$0027	$1787			BSF	TRISC, 7
$0028	$	USART_c67_L_4:
;USART_c67.ppas,32 :: 		
$0028	$1307			BCF	TRISC, 6
$0029	$	USART_c67_L_6:
;USART_c67.ppas,35 :: 		
$0029	$	USART_c67_L_8:
$0029	$3000			MOVLW	0
$002A	$1283			BCF	STATUS, RP0
$002B	$1A8C			BTFSC	PIR1, 5
$002C	$3001			MOVLW	1
$002D	$00F1			MOVWF	STACK_1
$002E	$0871			MOVF	STACK_1, 0
$002F	$3A01			XORLW	1
$0030	$1903			BTFSC	STATUS, Z
$0031	$2829			GOTO	USART_c67_L_8
;USART_c67.ppas,36 :: 		
$0032	$	USART_c67_L_9:
$0032	$	USART_c67_L_0:
;USART_c67.ppas,37 :: 		
$0032	$0008			RETURN
$0033	$	_main:
;USARTRecepcao.ppas,3 :: 		begin
;USARTRecepcao.ppas,4 :: 		trisb:=0;                              //Deixa todo o portb como saída
$0033	$1303			BCF	STATUS, RP1
$0034	$1683			BSF	STATUS, RP0
$0035	$0186			CLRF	TRISB, 1
;USARTRecepcao.ppas,5 :: 		trisd:=0;                              //Deixa todo o portd como saída
$0036	$0188			CLRF	TRISD, 1
;USARTRecepcao.ppas,6 :: 		portd:=0;                              //Deixa o portd limpo
$0037	$1283			BCF	STATUS, RP0
$0038	$0188			CLRF	PORTD, 1
;USARTRecepcao.ppas,7 :: 		portb:=%00100000;                      //Liga o transistor dos leds
$0039	$3020			MOVLW	32
$003A	$0086			MOVWF	PORTB
;USARTRecepcao.ppas,9 :: 		usart_init(9600);                      //Inicializa em 9600 bps
$003B	$3019			MOVLW	25
$003C	$1683			BSF	STATUS, RP0
$003D	$0099			MOVWF	SPBRG
$003E	$1518			BSF	TXSTA, BRGH
$003F	$2020			CALL	_usart_init
;USARTRecepcao.ppas,11 :: 		while true do
$0040	$	USARTRecepcao_L_2:
;USARTRecepcao.ppas,13 :: 		if usart_data_ready()=1 then     //Chegou algum byte?
$0040	$2004			CALL	_usart_data_ready
$0041	$0870			MOVF	STACK_0, 0
$0042	$3A01			XORLW	1
$0043	$1D03			BTFSS	STATUS, Z
$0044	$2848			GOTO	USARTRecepcao_L_7
$0045	$	USARTRecepcao_L_6:
;USARTRecepcao.ppas,15 :: 		portd:=usart_read();      //Sim, carrega o mesmo no PORTD
$0045	$200F			CALL	_usart_read
$0046	$0870			MOVF	STACK_0, 0
$0047	$0088			MOVWF	PORTD
;USARTRecepcao.ppas,16 :: 		end;
$0048	$	USARTRecepcao_L_7:
$0048	$	USARTRecepcao_L_8:
;USARTRecepcao.ppas,17 :: 		end;
$0048	$2840			GOTO	USARTRecepcao_L_2
;USARTRecepcao.ppas,19 :: 		end.
$0049	$2849			GOTO	$
